Versão do G++:
g++ (Debian 12.2.0-14) 12.2.0
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Varificando data de envio...
AGORA: 2024-11-09 17:39:07.344765-03:00
PRAZO MÁXIMO: 2024-11-13 23:59:59-03:06
Testando sua solucao...
Procurando exercício 1...
Exercício 1...
Compilando...
g++ -O2 -Wno-unused-result  "ex1.cpp"  > comp.log 2>&1
Teste 1: correto! +0.050
Teste 2: correto! +0.050
Teste 3: correto! +0.050
Teste 4: correto! +0.050
Teste 5: correto! +0.050
Teste 6: correto! +0.050
Teste 7: correto! +0.050
Teste 8: correto! +0.050
Teste 9: correto! +0.050
Teste 10: correto! +0.050
Teste 11: correto! +0.050
Teste 12: correto! +0.050
Teste 13: correto! +0.050
Teste 14: correto! +0.050
Teste 15: correto! +0.050
Teste 16: correto! +0.050
Teste 17: correto! +0.050
Se nao entender esse erro, peça ajuda ao professor:
tester.py, 291: ZeroDivisionError - float division by zero
Traceback completo:
  File "tester.py", line 291, in <module>
  File "gen.py", line 283, in score
Teste 18 deu errado!
O resultado para
#include<iostream>
int main() {
    Televisao tv(true, 11);
    tv.canal_baixo();
    tv.canal_cima();
    tv.liga();
    tv.canal_cima();
    tv.canal_cima();
    tv.canal_baixo();
    tv.canal_baixo();
    tv.canal_baixo();
    tv.canal_cima();
    tv.desliga();
    return 0;
}
deveria ser

mas deu

Teste 19: correto! +0.050
Teste 20: correto! +0.050
Nota exercicio 1: 1.0
Procurando exercício 2...
Exercício 2...
Compilando...
g++ -O2 -Wno-unused-result  "ex2.cpp"  > comp.log 2>&1
Teste 1: correto! +0.050
Teste 2: correto! +0.050
Teste 3: correto! +0.050
Teste 4: correto! +0.050
Teste 5: correto! +0.050
Teste 6: correto! +0.050
Teste 7: correto! +0.050
Teste 8: correto! +0.050
Teste 9: correto! +0.050
Teste 10: correto! +0.050
Teste 11: correto! +0.050
Teste 12: correto! +0.050
Teste 13: correto! +0.050
Teste 14: correto! +0.050
Teste 15: correto! +0.050
Teste 16: correto! +0.050
Teste 17: correto! +0.050
Teste 18: correto! +0.050
Teste 19: correto! +0.050
Teste 20: correto! +0.050
Nota exercicio 2: 1.0
Procurando exercício 3...
Exercício 3...
Compilando...
g++ -O2 -Wno-unused-result  "ex3.cpp"  > comp.log 2>&1
Teste 1: correto! +0.050
Teste 2: correto! +0.050
Teste 3: correto! +0.050
Teste 4: correto! +0.050
Teste 5: correto! +0.050
Teste 6: correto! +0.050
Teste 7: correto! +0.050
Teste 8: correto! +0.050
Teste 9: correto! +0.050
Teste 10: correto! +0.050
Teste 11: correto! +0.050
Teste 12: correto! +0.050
Teste 13: correto! +0.050
Teste 14: correto! +0.050
Teste 15 deu errado! +0.043
O resultado para
#include<iostream>
int main() {
    Vetor v(-1, 3);
    std::cout << v << std::endl;
    v = v + Vetor(1,2);
    std::cout << v << std::endl;
    v = v + Vetor(1,2);
    std::cout << v << std::endl;
    v = v - Vetor(1,6);
    std::cout << v << std::endl;
    std::cout << v * Vetor(3, 2) << std::endl; 
    std::cout << (v ^ Vetor(-4501,9002)) << std::endl;
    std::cout << v.abs() << std::endl;
    return 0;
}

deveria ser
(-1,3)
(0,5)
(1,7)
(0,1)
2
4501
1.0
mas deu
(-1,3)
(0,5)
(1,7)
(0,1)
2
4501
1

Teste 16: correto! +0.050
Teste 17: correto! +0.050
Teste 18: correto! +0.050
Teste 19: correto! +0.050
Teste 20 deu errado! +0.049
O resultado para
#include<iostream>
int main() {
    Vetor v(22, 9);
    std::cout << (v ^ Vetor(0,-49)) << std::endl;
    std::cout << v.abs() << std::endl;
    v = v - Vetor(-43, -15);
    std::cout << v << std::endl;
    v = v - Vetor(2, -44);
    std::cout << (v < Vetor(54,-78)) << std::endl;
    std::cout << (v ^ Vetor(-41,94)) << std::endl;
    std::cout << v.abs() << std::endl;
    std::cout << (v * Vetor(-4,-95)) << std::endl;
    std::cout << (v ^ Vetor(-13,46)) << std::endl;
    std::cout << (v * Vetor(-16,13)) << std::endl;
    std::cout << v.abs() << std::endl;
    std::cout << (v * Vetor(-5,74)) << std::endl;
    std::cout << v << std::endl;
    std::cout << (v < Vetor(54,-41)) << std::endl;
    std::cout << (v * Vetor(81,-97)) << std::endl;
    v = v + Vetor(-50, 41);
    std::cout << v.abs() << std::endl;
    v = v + Vetor(72, 54);
    std::cout << (v * Vetor(48,3)) << std::endl;
    v = v + Vetor(-71, -58);
    std::cout << v << std::endl;
    v = v + Vetor(-30, -64);
    v = v - Vetor(-99, 97);
    std::cout << (v < Vetor(-26,41)) << std::endl;
    std::cout << (v * Vetor(-48,4)) << std::endl;
    std::cout << v.abs() << std::endl;
    std::cout << (v < Vetor(-42,7)) << std::endl;
    std::cout << v << std::endl;
    v = v - Vetor(-36, 1);
    std::cout << (v ^ Vetor(-65,100)) << std::endl;
    std::cout << (v < Vetor(9,-35)) << std::endl;
    std::cout << v << std::endl;
    std::cout << (v < Vetor(-19,-83)) << std::endl;
    v = v + Vetor(85, -84);
    v = v - Vetor(-44, 15);
    std::cout << (v * Vetor(21,9)) << std::endl;
    std::cout << v.abs() << std::endl;
    std::cout << (v ^ Vetor(-43,-72)) << std::endl;
    std::cout << v.abs() << std::endl;
    v = v - Vetor(-49, 75);
    std::cout << v << std::endl;
    std::cout << (v ^ Vetor(-55,-66)) << std::endl;
    std::cout << v.abs() << std::endl;
    v = v + Vetor(77, 5);
    std::cout << v.abs() << std::endl;
    std::cout << (v * Vetor(75,81)) << std::endl;
    std::cout << v.abs() << std::endl;
    v = v + Vetor(-97, 13);
    std::cout << v << std::endl;
    v = v - Vetor(79, 94);
    std::cout << (v < Vetor(-30,-72)) << std::endl;
    std::cout << (v * Vetor(37,5)) << std::endl;
    std::cout << v.abs() << std::endl;
    v = v - Vetor(99, -28);
    std::cout << (v * Vetor(-96,47)) << std::endl;
    std::cout << v.abs() << std::endl;
    std::cout << (v < Vetor(51,10)) << std::endl;
    v = v - Vetor(-82, -49);
    std::cout << (v ^ Vetor(-67,-17)) << std::endl;
    std::cout << v << std::endl;
    std::cout << (v * Vetor(-72,33)) << std::endl;
    std::cout << (v ^ Vetor(-88,62)) << std::endl;
    std::cout << (v * Vetor(-96,-36)) << std::endl;
    v = v + Vetor(-51, -82);
    std::cout << v.abs() << std::endl;
    std::cout << (v ^ Vetor(53,-71)) << std::endl;
    std::cout << v.abs() << std::endl;
    v = v + Vetor(48, -85);
    std::cout << (v < Vetor(20,-58)) << std::endl;
    v = v + Vetor(-77, 59);
    std::cout << (v < Vetor(22,56)) << std::endl;
    std::cout << (v ^ Vetor(-67,81)) << std::endl;
    std::cout << (v < Vetor(-69,55)) << std::endl;
    std::cout << v.abs() << std::endl;
    std::cout << (v * Vetor(78,-92)) << std::endl;
    std::cout << v.abs() << std::endl;
    std::cout << (v * Vetor(-27,58)) << std::endl;
    std::cout << v.abs() << std::endl;
    v = v + Vetor(-11, -26);
    std::cout << v.abs() << std::endl;
    std::cout << (v < Vetor(-39,14)) << std::endl;
    std::cout << (v * Vetor(71,1)) << std::endl;
    std::cout << (v < Vetor(54,-42)) << std::endl;
    std::cout << v << std::endl;
    std::cout << (v < Vetor(46,-2)) << std::endl;
    v = v - Vetor(-25, -38);
    std::cout << (v ^ Vetor(38,-14)) << std::endl;
    v = v - Vetor(31, 56);
    std::cout << v << std::endl;
    std::cout << (v < Vetor(94,-26)) << std::endl;
    v = v - Vetor(18, 16);
    v = v + Vetor(-12, 57);
    std::cout << v.abs() << std::endl;
    std::cout << (v ^ Vetor(-74,30)) << std::endl;
    std::cout << (v < Vetor(-31,87)) << std::endl;
    std::cout << v.abs() << std::endl;
    std::cout << (v ^ Vetor(32,-2)) << std::endl;
    std::cout << v << std::endl;
    return 0;
}
deveria ser
-1078
23.769728648009426
(65,24)
102.49064727554162
8710
92.69843580125827
-6712
3782
-124
92.69843580125827
4717
(63,68)
84.39372272855717
-1493
109.77249200050075
4569
(14,105)
156.38817012630153
-4208
100.12492197250393
155.45482978829335
(83,-56)
8195
49.98519762649019
(119,-57)
77.29971479888334
3804
292.9846412356798
-24564
292.9846412356798
(297,-231)
-32307
376.25789028271555
436.9805487661894
9744
436.9805487661894
(277,-213)
55.43990398971748
5791
365.3121952522253
-22617
296.0439156611735
81.55706807342946
-18487
(181,-230)
-20622
-9018
-9096
338.0
7306
338.0
5.12407968356845
141.91524670687315
-14465
145.19541686668646
352.7676289003854
38974
352.7676289003854
-22331
352.7676289003854
374.9613313396463
123.63483776633291
6026
38.23701518799502
(90,-364)
73.62244591709405
10778
(84,-382)
62.13708644283679
345.2491853719571
-23614
169.3864156535977
345.2491853719571
10804
(54,-341)

mas deu
-1078
23.7697
(65,24)
102.491
8710
92.6984
-6712
3782
-124
92.6984
4717
(63,68)
84.3937
-1493
109.772
4569
(14,105)
156.388
-4208
100.125
155.455
(83,-56)
8195
49.9852
(119,-57)
77.2997
3804
292.985
-24564
292.985
(297,-231)
-32307
376.258
436.981
9744
436.981
(277,-213)
55.4399
5791
365.312
-22617
296.044
81.5571
-18487
(181,-230)
-20622
-9018
-9096
338
7306
338
5.12408
141.915
-14465
145.195
352.768
38974
352.768
-22331
352.768
374.961
123.635
6026
38.237
(90,-364)
73.6224
10778
(84,-382)
62.1371
345.249
-23614
169.386
345.249
10804
(54,-341)

Nota exercicio 3: 1.0
Procurando exercício 4...
Exercício 4...
Compilando...
g++ -O2 -Wno-unused-result  "ex4.cpp"  > comp.log 2>&1
Teste 1: correto! +0.050
Teste 2: correto! +0.050
Teste 3: correto! +0.050
Teste 4: correto! +0.050
Teste 5: correto! +0.050
Teste 6: correto! +0.050
Teste 7: correto! +0.051
Teste 8 deu errado!
O resultado para
#include<iostream>
int main() {
    double *v;
    Polinomio2 p1(1);
    v = p1.raizes();
    for(int i=0; i<=v[0]; i++) std::cout << v[i] << " ";
    std::cout << '\n' << p1(2) << '\n';
    
    Polinomio2 p2(1,1);
    v = p2.raizes();
    for(int i=0; i<=v[0]; i++) std::cout << v[i] << " ";
    std::cout << '\n' << p2(2) << '\n';
    return 0;
}

deveria ser
1 0
4
2 -1 0
6
mas deu
0 
4.45551e+09
2 -8.40862e+08 -8.40831e+08 
5.07802e+09

Teste 9: correto! +0.050
Teste 10: correto! +0.050
Teste 11: correto! +0.050
Teste 12: correto! +0.050
Teste 13: correto! +0.050
Teste 14: correto! +0.050
Teste 15: correto! +0.050
Teste 16: correto! +0.050
Teste 17: correto! +0.050
Teste 18: correto! +0.050
Teste 19: correto! +0.050
Teste 20: correto! +0.050
Nota exercicio 4: 1.0
Procurando exercício 5...
Exercício 5...
Compilando...
g++ -O2 -Wno-unused-result  "ex5.cpp"  > comp.log 2>&1
Teste 1: correto! +0.050
Teste 2: correto! +0.050
Teste 3: correto! +0.050
Teste 4: correto! +0.050
Teste 5: correto! +0.050
Teste 6: correto! +0.050
Teste 7: correto! +0.050
Teste 8: correto! +0.050
Teste 9: correto! +0.050
Teste 10: correto! +0.050
Teste 11: correto! +0.050
Teste 12: correto! +0.050
Teste 13: correto! +0.050
Teste 14: correto! +0.050
Teste 15: correto! +0.050
Teste 16: correto! +0.050
Teste 17: correto! +0.050
Teste 18: correto! +0.050
Teste 19: correto! +0.050
Teste 20: correto! +0.050
Nota exercicio 5: 1.0
Procurando exercício 6...
Exercício 6...
Compilando...
g++ -O2 -Wno-unused-result  "ex6.cpp"  > comp.log 2>&1
Teste 1 deu errado! +0.083
O resultado para
#include<iostream>
int main() {
    BigInt a("999999999999999999999999999");
    std::cout << a << std::endl;
    BigInt b(1);
    std::cout << b << std::endl;
    BigInt c = a+b;
    std::cout << c << std::endl;
    std::cout << a*2 << std::endl;
    std::cout << c*2 << std::endl;
    std::cout << a*2-c*2 << std::endl;
    return 0;
}
deveria ser
999999999999999999999999999
1
1000000000000000000000000000
1999999999999999999999999998
2000000000000000000000000000
-2
mas deu
999999999999999999999999999
1
1000000000000000000000000000
1999999999999999999999999998
2000000000000000000000000000
-0000000000000000000000000002

Teste 2 deu errado! +0.033
O resultado para
#include<iostream>
int main() {
    BigInt a(-12568466);
    a = a - BigInt(1160676875);
    std::cout << a << std::endl;
    a = a * BigInt(1316487022);
    a = a ^ BigInt(24);
    std::cout << a.abs() << std::endl;
    std::cout << a << std::endl;
    a = a ^ BigInt(23);
    return 0;
}
deveria ser
-1173245341
33988350709810102066721395164269964241102969471624433104912234116902955085638998902168359510992258562811056433163955481349860799168210155703394675722372888536409744910148038539430614399994981590770847587502606647958505987886021129266168248685025260222137335388282388577960469473601481867330862986021131967693016216100626848144441716548668741936592086629967901316858875587838872749013141602966795806621561565266564051140152520798650761216
33988350709810102066721395164269964241102969471624433104912234116902955085638998902168359510992258562811056433163955481349860799168210155703394675722372888536409744910148038539430614399994981590770847587502606647958505987886021129266168248685025260222137335388282388577960469473601481867330862986021131967693016216100626848144441716548668741936592086629967901316858875587838872749013141602966795806621561565266564051140152520798650761216

mas deu
-1173245341
0000000002460529031520352503000000000
0000000002460529031520352503000000000

Teste 3 deu errado!

double free or corruption (out)

#include<iostream>
int main() {
    BigInt a(4334878);
    a = a * BigInt(-1123938810);
    a = a / (-178404442);
    std::cout << a.abs() << std::endl;
    a = a ^ BigInt(19);
    a = a * BigInt(1748385394);
    a = a / (1198807311);
    a = a - BigInt(1153465852);
    a = a * BigInt(1613271903);
    a = a - BigInt(-1081557699);
    std::cout << a << std::endl;
    a = a - BigInt(-514242454);
    a = a * BigInt(-17337088);
    std::cout << a << std::endl;
    a = a ^ BigInt(14);
    std::cout << a.abs() << std::endl;
    std::cout << a << std::endl;
    a = a ^ BigInt(29);
    return 0;
}
Teste 4 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(-13608672);
    a = a - BigInt(448076132);
    a = a ^ BigInt(19);
    std::cout << a.abs() << std::endl;
    std::cout << a << std::endl;
    a = a * BigInt(676876222);
    std::cout << a.abs() << std::endl;
    std::cout << a << std::endl;
    std::cout << a.abs() << std::endl;
    a = a * BigInt(-1838848095);
    a = a / (-1230878483);
    a = a + BigInt(-586946991);
    a = a ^ BigInt(24);
    std::cout << a << std::endl;
    return 0;
}
deveria ser
419339744298730540940742161552502856392097999050905906378818458623524742976178725925166767293085261108859494019761643389320758853567927728198506544078745580699910144
-419339744298730540940742161552502856392097999050905906378818458623524742976178725925166767293085261108859494019761643389320758853567927728198506544078745580699910144
283841101855370767947985880187771788078891844251336775587180339096954748349236892001000336165296718263248345040927854517874710398976110141032047975598297779163351294010195968
-283841101855370767947985880187771788078891844251336775587180339096954748349236892001000336165296718263248345040927854517874710398976110141032047975598297779163351294010195968
283841101855370767947985880187771788078891844251336775587180339096954748349236892001000336165296718263248345040927854517874710398976110141032047975598297779163351294010195968


mas deu
21927
21927
21927
21927
5
VAZIO
2287266607267788969

Teste 5 deu errado!

double free or corruption (out)

#include<iostream>
int main() {
    BigInt a(-3207467);
    a = a ^ BigInt(21);
    std::cout << a << std::endl;
    a = a ^ BigInt(29);
    a = a - BigInt(-832840432);
    a = a + BigInt(-1336326377);
    a = a - BigInt(-932485478);
    a = a * BigInt(-392875543);
    a = a + BigInt(1077366041);
    a = a / (-2114337552);
    a = a - BigInt(-1228075055);
    a = a * BigInt(170626342);
    std::cout << a.abs() << std::endl;
    std::cout << a << std::endl;
    a = a ^ BigInt(14);
    return 0;
}
Teste 6 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(14059991);
    a = a / (728201307);
    a = a - BigInt(1593303563);
    a = a * BigInt(-1648366400);
    a = a + BigInt(1788891782);
    a = a - BigInt(1365083517);
    a = a / (-1598667199);
    a = a + BigInt(385278643);
    std::cout << a.abs() << std::endl;
    a = a * BigInt(152569906);
    a = a / (188360806);
    a = a * BigInt(303177301);
    std::cout << a.abs() << std::endl;
    a = a - BigInt(284456224);
    a = a / (1878658403);
    std::cout << a << std::endl;
    std::cout << a.abs() << std::endl;
    std::cout << a << std::endl;
    a = a * BigInt(1816059252);
    std::cout << a << std::endl;
    a = a ^ BigInt(24);
    return 0;
}
deveria ser
1257557377
308818159046009606
-164382284
164382284
-164382284
-298527967723091568

mas deu
VAZIO
VAZIO
5
VAZIO
21982
VAZIO
21982
21982
21982
21982

Teste 7 deu errado! +0.050
O resultado para
#include<iostream>
int main() {
    BigInt a(4548235);
    a = a * BigInt(1915127479);
    std::cout << a.abs() << std::endl;
    a = a / (388554083);
    a = a - BigInt(-598748305);
    a = a ^ BigInt(29);
    a = a + BigInt(1565546381);
    std::cout << a << std::endl;
    a = a ^ BigInt(28);
    return 0;
}
deveria ser
8710449829449565
1006979583172611132494881104679998193378770815428216659031071983373738513076158509280250555220041091947503164798771396429141258882255385112536782673583817462991079646940362393956845533448160549466645750877475771501869283416886899085834891211309808916387725

mas deu
8710449829449565
VAZIO
1565546381

Teste 8 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(11020482);
    a = a * BigInt(1227136812);
    a = a ^ BigInt(18);
    a = a / (1473943884);
    a = a * BigInt(-1587727743);
    a = a + BigInt(-899940938);
    std::cout << a << std::endl;
    a = a + BigInt(2130123447);
    a = a * BigInt(1998179383);
    std::cout << a << std::endl;
    a = a - BigInt(-750686710);
    return 0;
}
deveria ser
-246592245399364890693936323106943756331149095343695926467352894167201942382756029178294078327149262593954447750173592232292382924218263750672770689493197007665676902553998625954739460130695770903431741435894074994030520598681981500424077361266097882178991620388878843141874454112168743355148
-492735540764687525878672123947121518041477843014874499288148575710283876066776992223013658424296785678892877935547606669615586387114186018650582771232000979474848543422700098593089080369706774864528589684990356824927634333043152407734797140078959565030024171590820146850984478181310896020519940220483

mas deu
VAZIO
-21900
16730325074140814415

Teste 9 deu errado!

double free or corruption (out)

#include<iostream>
int main() {
    BigInt a(-5042221);
    a = a * BigInt(1936152997);
    a = a ^ BigInt(23);
    a = a + BigInt(-1156701581);
    a = a * BigInt(-1912645361);
    a = a + BigInt(1466881826);
    std::cout << a << std::endl;
    a = a * BigInt(-1459538050);
    a = a / (1459982218);
    std::cout << a.abs() << std::endl;
    std::cout << a << std::endl;
    a = a ^ BigInt(28);
    return 0;
}
Teste 10 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(-6567779);
    a = a / (-121962285);
    std::cout << a << std::endl;
    std::cout << a.abs() << std::endl;
    a = a + BigInt(-261187602);
    std::cout << a << std::endl;
    a = a / (-441098483);
    a = a + BigInt(1737103045);
    a = a ^ BigInt(29);
    std::cout << a << std::endl;
    a = a - BigInt(-474298664);
    a = a + BigInt(1611886660);
    std::cout << a.abs() << std::endl;
    a = a - BigInt(-1153193480);
    std::cout << a.abs() << std::endl;
    a = a * BigInt(1012740514);
    std::cout << a.abs() << std::endl;
    a = a + BigInt(639116816);
    return 0;
}
deveria ser
0
0
-261187602
9014504618689089357952266203502043043313822075621895472998736549095060519994706151936516711265247619334948541848069350505292927707103325356658590874916528742760011550127653550882330340290500764728505294030079846717801581780996296803944838298836553283035755157470703125
9014504618689089357952266203502043043313822075621895472998736549095060519994706151936516711265247619334948541848069350505292927707103325356658590874916528742760011550127653550882330340290500764728505294030079846717801581780996296803944838298836553283035755159556888449
9014504618689089357952266203502043043313822075621895472998736549095060519994706151936516711265247619334948541848069350505292927707103325356658590874916528742760011550127653550882330340290500764728505294030079846717801581780996296803944838298836553283035755160710081929
9129354040986562362564508062399487671735764432169865290979013574081117825880545985591150029536356464342552124434764263938376519326656663172811654645178675026038547875922216622734496382343596653788539521927744195426027586882899225057323652766410616573850018161835680977757571506

mas deu
VAZIO
5
0
-22003
VAZIO
3017526989000000000
0000000001000000000
0000000001000000000
1012740514000000000

Teste 11 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(14818305);
    a = a * BigInt(872554486);
    a = a / (1417721896);
    a = a + BigInt(688650250);
    std::cout << a << std::endl;
    std::cout << a.abs() << std::endl;
    a = a - BigInt(-1970765206);
    a = a / (-2095854143);
    std::cout << a << std::endl;
    a = a - BigInt(-729525009);
    std::cout << a << std::endl;
    a = a * BigInt(1174334848);
    a = a ^ BigInt(10);
    a = a * BigInt(2094352806);
    a = a / (-1981967321);
    a = a + BigInt(887326762);
    a = a - BigInt(1747764416);
    std::cout << a.abs() << std::endl;
    return 0;
}
deveria ser
697770359
697770359
-1
729525008
225047752422125044632059189268586102254285737279762321537197943592732559761102521941745767655649416855823392736890069467692331135184288880158776575861170539939178495192902932342349

mas deu
VAZIO
21875
21875
VAZIO
21875
21875
VAZIO
21875

Teste 12 deu errado! +0.025
O resultado para
#include<iostream>
int main() {
    BigInt a(7992367);
    std::cout << a.abs() << std::endl;
    a = a ^ BigInt(30);
    std::cout << a.abs() << std::endl;
    a = a / (-739050059);
    std::cout << a << std::endl;
    a = a - BigInt(-1580492302);
    a = a / (-738421460);
    std::cout << a << std::endl;
    a = a ^ BigInt(24);
    return 0;
}
deveria ser
7992367
1202991444960193055904594434704010662430112808393553551324723127463585056948432908971678568590348741642590296949788652607133405279883449417490042272270357352863936515114536114166686757237464848430061602794849
-1627753668794704819723983588375588861741925398308578649778205521344238275676036322421399831848668780963577863606920641091692823043105188924002294507996727394705392365193676432906809032860742723288330
2204369397382769481975758922791313326324407470915835314128337387898014604933118171323731344222673026002762519397690095696423588560258241850124852151502649170983454848662817075910563369678802

mas deu
7992367
63877930262689
VAZIO
22041
VAZIO
22041

Teste 13 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(-2701931);
    a = a ^ BigInt(20);
    a = a * BigInt(308560157);
    a = a ^ BigInt(17);
    a = a / (-521496429);
    std::cout << a << std::endl;
    a = a + BigInt(1620550126);
    std::cout << a.abs() << std::endl;
    a = a * BigInt(336814949);
    a = a / (1005293371);
    std::cout << a.abs() << std::endl;
    a = a / (-1165757371);
    std::cout << a << std::endl;
    a = a ^ BigInt(20);
    return 0;
}
deveria ser
-2348402094335268516003921620278528795413099164159682461091687329367486905152018588419193165563758771401682751369360335974729960205934996809427578195286445234513586645438566739790353159516747677061587780055670419401543397788281358766738732144717469610389476702307711694458372186593273115115264385883665013993341134903912680865364390483339304237498528521167595955684738207453456583829244286819147802342359452010497684502313288669485740440327921766532907713052290848104242353187867882564444103617635346614152649542099311582275620469915102132036581144277476564975561946592490752484315386487059571608076917284808328549720166111234687028997117202495984378483138336569403641001992574369305359569400229475969263817457322524470365106853604279860923257525813956003114582686148639860277251592639495658527399286606911590070029227570934244780977517864913726666391463979749807800038687004224104449500107961764715110146081413122595669105270545755125758450800807833633942580679342076576791272975552278195798160236065172286386302748753617535799586036572637247477993099226219648974424880297712074794933686810940941086627385500757346121948586018971374309508714029493165604910698137411094041034353453135818257078840888806262796823690930207396988314207034944290201493938928628475702620674772026754346327600207594309050916498661477915137543770942245766733162656448146203480408609794117733825467562509517774086023479599871783616811703915389544270393621807380008268841762370884601188477817737969788303681433908230133240536088498710150228204382590098673111051732914369346555283768795567200032210720453338025411399621631213141943120446047076095531456564133862195797445624776390031716514304910270318206231529375384520372306595903261498450170084983617790690600356362402656220988995853570806826275275069601731446898105920067369715547393518469027790564228146458141014530620136170485052951822367661590679505772771176594101539717790633722004514884180410733001946177372536301354610453398794631682958544261292783025728053799516043057876262029903762896663592586533473286196012196885619337956568711627998533859931387086270021176938883973710385888343504852747820706460609193954077659338278440066929021084101736240987489078767849583009542224949617498411653548779203831086455552942768834950836584346646504362819902528756667931031617686691930323542651447621785234




mas deu
VAZIO
21842
1620550126
VAZIO
21842
VAZIO
21842

Teste 14 deu errado! +0.050
O resultado para
#include<iostream>
int main() {
    BigInt a(-13110743);
    a = a * BigInt(1787573765);
    std::cout << a.abs() << std::endl;
    a = a / (1995770437);
    a = a ^ BigInt(16);
    a = a - BigInt(-1531413543);
    a = a ^ BigInt(19);
    a = a / (437160191);
    std::cout << a << std::endl;
    a = a ^ BigInt(17);
    return 0;
}
deveria ser
23436420226457395


mas deu
23436420226457395
VAZIO
VAZIO
21997

Teste 15 deu errado! +0.025
O resultado para
#include<iostream>
int main() {
    BigInt a(2577970);
    std::cout << a.abs() << std::endl;
    a = a ^ BigInt(24);
    std::cout << a << std::endl;
    a = a ^ BigInt(24);
    a = a - BigInt(-2123523167);
    std::cout << a << std::endl;
    std::cout << a << std::endl;
    a = a ^ BigInt(17);
    return 0;
}
deveria ser
2577970
7424524064432716038354163911538012876134558919667848601395266043187711680821707729290049920795695086956884884846694346841037682081000000000000000000000000



mas deu
2577970
6645929320900
0044168375000000000
0044168375000000000

Teste 16 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(-2474227);
    a = a + BigInt(-690484841);
    std::cout << a << std::endl;
    a = a + BigInt(124565965);
    a = a - BigInt(-168467104);
    a = a ^ BigInt(24);
    a = a * BigInt(458038664);
    std::cout << a << std::endl;
    a = a / (288496658);
    a = a - BigInt(644979127);
    a = a / (-760200811);
    std::cout << a << std::endl;
    a = a + BigInt(-1287369228);
    std::cout << a << std::endl;
    std::cout << a.abs() << std::endl;
    a = a * BigInt(605883994);
    a = a - BigInt(1398151836);
    a = a / (864851024);
    std::cout << a.abs() << std::endl;
    a = a / (-535526268);
    std::cout << a.abs() << std::endl;
    return 0;
}
deveria ser
-692959068
128355197465572904244921500858894757886181282631395585158174333515635372716796010438075733112462373725156134854023998289782315268093637139801754879521270515297350311309940960854718861492991160474185920131008389302664
-585253937199829211536483784326225108170159262882644731745450161178999311902000469057913697255060222774933370039000734647242833815136688646097347064104140919530463923203510531925447972823465551997925
-585253937199829211536483784326225108170159262882644731745450161178999311902000469057913697255060222774933370039000734647242833815136688646097347064104140919530463923203510531925447972823466839367153
585253937199829211536483784326225108170159262882644731745450161178999311902000469057913697255060222774933370039000734647242833815136688646097347064104140919530463923203510531925447972823466839367153
410008178443062927799222530565920758488016920948263505036899782849856291571478535686722119438922840987936892727908362720520602909979643584062997134178788845677484087089954391849173468763200013927865
765617305709946851382503109195608605492376932196094450098757401849532227934482077892623783375128185099478430678788594400976429619283668049805163122602958564261284914393693927725639536253709

mas deu
-5
21911
VAZIO
VAZIO
21911
-606597425
606597425
VAZIO
21911
VAZIO
5

Teste 17 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(20192820);
    a = a ^ BigInt(15);
    a = a - BigInt(2019227264);
    a = a ^ BigInt(25);
    a = a - BigInt(-1315553726);
    std::cout << a << std::endl;
    a = a ^ BigInt(10);
    return 0;
}
deveria ser


mas deu
0000000018446744064416158434134981110623465618000000000

Teste 18 deu errado! +0.050
O resultado para
#include<iostream>
int main() {
    BigInt a(-18739146);
    std::cout << a.abs() << std::endl;
    std::cout << a << std::endl;
    a = a ^ BigInt(11);
    std::cout << a << std::endl;
    a = a ^ BigInt(29);
    a = a + BigInt(312435506);
    a = a / (-944478634);
    a = a * BigInt(1963945008);
    a = a / (-227942101);
    std::cout << a << std::endl;
    a = a ^ BigInt(29);
    return 0;
}
deveria ser
18739146
-18739146
-100057061362914889080477427611308865197658527891943295561603965845361262221060096


mas deu
18739146
-18739146
351155592809316
VAZIO
VAZIO
21998

Teste 19 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(16268847);
    a = a / (827233625);
    a = a - BigInt(2072483519);
    a = a / (1448087381);
    a = a * BigInt(-1732076996);
    a = a / (-1773344924);
    a = a + BigInt(98799951);
    a = a * BigInt(-1073680045);
    a = a - BigInt(-141581874);
    std::cout << a.abs() << std::endl;
    std::cout << a << std::endl;
    std::cout << a.abs() << std::endl;
    a = a ^ BigInt(16);
    std::cout << a << std::endl;
    a = a / (-1840306091);
    std::cout << a << std::endl;
    return 0;
}
deveria ser
106079535694095921
-106079535694095921
106079535694095921
257102182196401323970473755452755070241280945340398594051061418748910894697519767547174861455006154994883012178297574994277924971768079354857405595531602345791518514711353544509384730349500757354323570215621453830303102406434111660850465088017520031811467252630755165182721
-139706206186980078832154316579260330362771670759197956733308132461596517477113413274669676379942033781424359899212861429516360260619318547295622462585003934430556919083388256040600547221413699789968021257623199286744686651387120611801781559183852112681763249476065

mas deu
VAZIO
VAZIO
VAZIO
22077
22077
22077
22077
VAZIO
22077

Teste 20 deu errado!

double free or corruption (out)

#include<iostream>
int main() {
    BigInt a(17691617);
    a = a - BigInt(1437743934);
    std::cout << a.abs() << std::endl;
    a = a / (-267332079);
    a = a + BigInt(-844679556);
    a = a * BigInt(653392299);
    std::cout << a << std::endl;
    std::cout << a.abs() << std::endl;
    a = a * BigInt(1419526333);
    a = a - BigInt(-1572295230);
    a = a ^ BigInt(20);
    return 0;
}
Nota exercicio 6: 0.3
Procurando exercício 7...
Procurando exercício 8...
Exercício 8...
Compilando...
g++ -O2 -Wno-unused-result  "ex8.cpp"  > comp.log 2>&1
Teste 1: correto! +0.100
Teste 2: correto! +0.100
Teste 3: correto! +0.100
Teste 4: correto! +0.100
Teste 5: correto! +0.100
Teste 6: correto! +0.100
Teste 7: correto! +0.100
Teste 8: correto! +0.100
Teste 9: correto! +0.100
Teste 10: correto! +0.100
Teste 11: correto! +0.100
Teste 12: correto! +0.100
Teste 13: correto! +0.100
Teste 14: correto! +0.100
Teste 15: correto! +0.100
Teste 16: correto! +0.100
Teste 17: correto! +0.100
Teste 18: correto! +0.100
Teste 19: correto! +0.100
Teste 20: correto! +0.100
Nota exercicio 8: 2.0
Nota total: 7.30
{"scores": {"ex1": 1.0, "ex2": 1.0, "ex3": 1.0, "ex4": 1.0, "ex5": 1.0, "ex6": 0.3, "ex7": 0.0, "ex8": 2.0}}
