Versão do G++:
g++ (Debian 12.2.0-14) 12.2.0
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Varificando data de envio...
AGORA: 2024-11-09 16:03:58.358093-03:00
PRAZO MÁXIMO: 2024-11-13 23:59:59-03:06
Testando sua solucao...
Procurando exercício 1...
Exercício 1...
Compilando...
g++ -O2 -Wno-unused-result  "ex1.cpp"  > comp.log 2>&1
Teste 1: correto! +0.050
Teste 2: correto! +0.050
Teste 3: correto! +0.050
Teste 4: correto! +0.050
Teste 5: correto! +0.050
Teste 6: correto! +0.050
Teste 7: correto! +0.050
Teste 8: correto! +0.050
Teste 9: correto! +0.050
Teste 10: correto! +0.050
Teste 11: correto! +0.050
Teste 12: correto! +0.050
Teste 13: correto! +0.050
Teste 14: correto! +0.050
Teste 15: correto! +0.050
Teste 16: correto! +0.050
Teste 17: correto! +0.050
Teste 18: correto! +0.050
Teste 19: correto! +0.050
Teste 20: correto! +0.050
Nota exercicio 1: 1.0
Procurando exercício 2...
Exercício 2...
Compilando...
g++ -O2 -Wno-unused-result  "ex2.cpp"  > comp.log 2>&1
Teste 1: correto! +0.050
Teste 2: correto! +0.050
Teste 3: correto! +0.050
Teste 4: correto! +0.050
Teste 5: correto! +0.050
Teste 6: correto! +0.050
Teste 7: correto! +0.050
Teste 8: correto! +0.050
Teste 9: correto! +0.050
Teste 10: correto! +0.050
Teste 11: correto! +0.050
Teste 12: correto! +0.050
Teste 13: correto! +0.050
Teste 14: correto! +0.050
Teste 15: correto! +0.050
Teste 16: correto! +0.050
Teste 17: correto! +0.050
Teste 18: correto! +0.050
Teste 19: correto! +0.050
Teste 20: correto! +0.050
Nota exercicio 2: 1.0
Procurando exercício 3...
Exercício 3...
Compilando...
g++ -O2 -Wno-unused-result  "ex3.cpp"  > comp.log 2>&1
Teste 1: correto! +0.050
Teste 2: correto! +0.050
Teste 3: correto! +0.050
Teste 4: correto! +0.050
Teste 5 deu errado! +0.048
O resultado para
#include<iostream>
int main() {
    Vetor v(47, 10);
    std::cout << (v * Vetor(49,-91)) << std::endl;
    std::cout << v << std::endl;
    std::cout << (v * Vetor(-53,31)) << std::endl;
    v = v - Vetor(15, -5);
    std::cout << (v < Vetor(-27,49)) << std::endl;
    v = v + Vetor(20, 15);
    std::cout << v.abs() << std::endl;
    v = v - Vetor(83, 77);
    v = v + Vetor(-95, 81);
    std::cout << v << std::endl;
    std::cout << (v ^ Vetor(73,8)) << std::endl;
    std::cout << v.abs() << std::endl;
    std::cout << (v * Vetor(34,-8)) << std::endl;
    std::cout << (v < Vetor(40,-46)) << std::endl;
    std::cout << v << std::endl;
    std::cout << v.abs() << std::endl;
    std::cout << v << std::endl;
    std::cout << (v * Vetor(18,-100)) << std::endl;
    std::cout << v.abs() << std::endl;
    v = v + Vetor(58, -34);
    std::cout << (v ^ Vetor(-32,39)) << std::endl;
    std::cout << v << std::endl;
    std::cout << v.abs() << std::endl;
    v = v - Vetor(14, -49);
    std::cout << (v < Vetor(2,60)) << std::endl;
    v = v + Vetor(52, -49);
    std::cout << v.abs() << std::endl;
    v = v - Vetor(-43, 30);
    std::cout << (v ^ Vetor(53,98)) << std::endl;
    v = v + Vetor(-50, 54);
    v = v - Vetor(-30, 76);
    std::cout << v << std::endl;
    v = v + Vetor(-55, 48);
    std::cout << (v ^ Vetor(-90,9)) << std::endl;
    std::cout << v << std::endl;
    std::cout << (v < Vetor(-7,44)) << std::endl;
    std::cout << (v ^ Vetor(98,-6)) << std::endl;
    v = v - Vetor(-62, 79);
    std::cout << (v < Vetor(9,21)) << std::endl;
    std::cout << (v * Vetor(-19,-20)) << std::endl;
    v = v + Vetor(85, 74);
    v = v - Vetor(65, -76);
    std::cout << (v * Vetor(62,-55)) << std::endl;
    v = v + Vetor(33, -78);
    v = v - Vetor(-14, -85);
    std::cout << (v < Vetor(99,-93)) << std::endl;
    std::cout << (v ^ Vetor(-67,99)) << std::endl;
    std::cout << (v * Vetor(-6,-28)) << std::endl;
    std::cout << v << std::endl;
    std::cout << (v * Vetor(-10,15)) << std::endl;
    v = v - Vetor(-44, 99);
    std::cout << (v < Vetor(-44,42)) << std::endl;
    v = v - Vetor(-17, 72);
    std::cout << (v < Vetor(-8,-31)) << std::endl;
    std::cout << (v ^ Vetor(59,-87)) << std::endl;
    v = v - Vetor(52, 58);
    std::cout << v << std::endl;
    std::cout << (v * Vetor(-11,78)) << std::endl;
    v = v + Vetor(22, -31);
    std::cout << v << std::endl;
    std::cout << v.abs() << std::endl;
    std::cout << (v ^ Vetor(80,92)) << std::endl;
    return 0;
}
deveria ser
1393
(47,10)
-2181
93.74082633357196
60.03332407921454
(-126,34)
-3490
130.50670480860362
-4556
146.11018506295568
(-126,34)
130.50670480860362
(-126,34)
-5668
130.50670480860362
-2652
(-68,0)
68.0
61.048260744646875
30.0
2864
(-7,-52)
-918
(-62,-4)
84.65190318309617
764
156.80140948635182
1660
-2445
91.05222727540959
11591
-2474
(67,74)
440
149.02488539898752
67.31499019959547
-5413
(76,-155)
-12926
(98,-186)
210.23796041628637
23896

mas deu
1393
(47,10)
-2181
93.7408
60.0333
(-126,34)
-3490
130.507
-4556
146.11
(-126,34)
130.507
(-126,34)
-5668
130.507
-2652
(-68,0)
68
61.0483
30
2864
(-7,-52)
-918
(-62,-4)
84.6519
764
156.801
1660
-2445
91.0522
11591
-2474
(67,74)
440
149.025
67.315
-5413
(76,-155)
-12926
(98,-186)
210.238
23896

Teste 6: correto! +0.050
Teste 7: correto! +0.050
Teste 8 deu errado! +0.043
O resultado para
#include<iostream>
int main() {
    Vetor v(-1, 3);
    std::cout << v << std::endl;
    v = v + Vetor(1,2);
    std::cout << v << std::endl;
    v = v + Vetor(1,2);
    std::cout << v << std::endl;
    v = v - Vetor(1,6);
    std::cout << v << std::endl;
    std::cout << v * Vetor(3, 2) << std::endl; 
    std::cout << (v ^ Vetor(-4501,9002)) << std::endl;
    std::cout << v.abs() << std::endl;
    return 0;
}

deveria ser
(-1,3)
(0,5)
(1,7)
(0,1)
2
4501
1.0
mas deu
(-1,3)
(0,5)
(1,7)
(0,1)
2
4501
1

Teste 9: correto! +0.050
Teste 10: correto! +0.050
Teste 11: correto! +0.050
Teste 12: correto! +0.050
Teste 13: correto! +0.050
Teste 14: correto! +0.050
Teste 15: correto! +0.050
Teste 16 deu errado! +0.048
O resultado para
#include<iostream>
int main() {
    Vetor v(-82, 86);
    std::cout << (v < Vetor(62,59)) << std::endl;
    std::cout << (v ^ Vetor(-43,-90)) << std::endl;
    std::cout << (v < Vetor(-30,-95)) << std::endl;
    std::cout << v.abs() << std::endl;
    std::cout << (v < Vetor(-62,77)) << std::endl;
    v = v + Vetor(54, -13);
    v = v - Vetor(-60, -25);
    std::cout << (v * Vetor(2,-63)) << std::endl;
    v = v + Vetor(73, 61);
    v = v - Vetor(99, 60);
    std::cout << (v ^ Vetor(-70,-18)) << std::endl;
    v = v - Vetor(61, 51);
    std::cout << v.abs() << std::endl;
    std::cout << v << std::endl;
    v = v - Vetor(-39, -81);
    std::cout << (v ^ Vetor(61,100)) << std::endl;
    std::cout << v << std::endl;
    std::cout << (v < Vetor(30,89)) << std::endl;
    v = v + Vetor(29, -54);
    std::cout << (v * Vetor(12,-85)) << std::endl;
    std::cout << (v ^ Vetor(14,83)) << std::endl;
    v = v - Vetor(32, -97);
    std::cout << v.abs() << std::endl;
    v = v - Vetor(74, -26);
    std::cout << v << std::endl;
    v = v + Vetor(-58, -67);
    std::cout << v.abs() << std::endl;
    std::cout << (v < Vetor(32,50)) << std::endl;
    std::cout << (v ^ Vetor(-35,-11)) << std::endl;
    std::cout << v << std::endl;
    std::cout << (v < Vetor(-12,-43)) << std::endl;
    std::cout << v << std::endl;
    std::cout << (v * Vetor(-14,-56)) << std::endl;
    v = v - Vetor(11, -62);
    std::cout << (v < Vetor(4,-14)) << std::endl;
    std::cout << v.abs() << std::endl;
    return 0;
}
deveria ser
90.05633801479613
11078
118.83835915788005
118.82760622010359
4.795235497540164
-6110
6822
73.0
(-55,48)
-9469
(-16,129)
25.698207996612645
-6219
29
173.04623659588788
(-93,198)
199.90497742677644
81.67598093248772
6246
(-151,131)
115.35045119943877
(-151,131)
-5222
155.93602970438516
251.9781736579579

mas deu
90.0563
11078
118.838
118.828
4.79524
-6110
6822
73
(-55,48)
-9469
(-16,129)
25.6982
-6219
29
173.046
(-93,198)
199.905
81.676
6246
(-151,131)
115.35
(-151,131)
-5222
155.936
251.978

Teste 17: correto! +0.050
Teste 18: correto! +0.050
Teste 19: correto! +0.050
Teste 20: correto! +0.050
Nota exercicio 3: 1.0
Procurando exercício 4...
Exercício 4...
Compilando...
g++ -O2 -Wno-unused-result  "ex4.cpp"  > comp.log 2>&1
Teste 1: correto! +0.050
Teste 2: correto! +0.050
Teste 3: correto! +0.050
Teste 4: correto! +0.050
Teste 5: correto! +0.050
Teste 6: correto! +0.050
Teste 7: correto! +0.050
Teste 8: correto! +0.050
Teste 9: correto! +0.050
Teste 10: correto! +0.050
Teste 11: correto! +0.050
Teste 12: correto! +0.050
Teste 13: correto! +0.050
Teste 14 deu errado!
O resultado para
#include<iostream>
int main() {
    double *v;
    Polinomio2 p1(1);
    v = p1.raizes();
    for(int i=0; i<=v[0]; i++) std::cout << v[i] << " ";
    std::cout << '\n' << p1(2) << '\n';
    
    Polinomio2 p2(1,1);
    v = p2.raizes();
    for(int i=0; i<=v[0]; i++) std::cout << v[i] << " ";
    std::cout << '\n' << p2(2) << '\n';
    return 0;
}

deveria ser
1 0
4
2 -1 0
6
mas deu
0 
4.45551e+09
2 -8.40862e+08 -8.40831e+08 
5.07802e+09

Teste 15: correto! +0.050
Teste 16: correto! +0.051
Teste 17: correto! +0.050
Teste 18: correto! +0.050
Teste 19: correto! +0.050
Teste 20: correto! +0.050
Nota exercicio 4: 1.0
Procurando exercício 5...
Exercício 5...
Compilando...
g++ -O2 -Wno-unused-result  "ex5.cpp"  > comp.log 2>&1
Teste 1: correto! +0.050
Teste 2: correto! +0.050
Teste 3: correto! +0.050
Teste 4: correto! +0.050
Teste 5: correto! +0.050
Teste 6: correto! +0.050
Teste 7: correto! +0.050
Teste 8: correto! +0.050
Teste 9: correto! +0.050
Teste 10: correto! +0.050
Teste 11: correto! +0.050
Teste 12: correto! +0.050
Teste 13: correto! +0.050
Teste 14: correto! +0.050
Teste 15: correto! +0.050
Teste 16: correto! +0.050
Teste 17: correto! +0.050
Teste 18: correto! +0.050
Teste 19: correto! +0.050
Teste 20: correto! +0.050
Nota exercicio 5: 1.0
Procurando exercício 6...
Exercício 6...
Compilando...
g++ -O2 -Wno-unused-result  "ex6.cpp"  > comp.log 2>&1
Teste 1 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a("999999999999999999999999999");
    std::cout << a << std::endl;
    BigInt b(1);
    std::cout << b << std::endl;
    BigInt c = a+b;
    std::cout << c << std::endl;
    std::cout << a*2 << std::endl;
    std::cout << c*2 << std::endl;
    std::cout << a*2-c*2 << std::endl;
    return 0;
}
deveria ser
999999999999999999999999999
1
1000000000000000000000000000
1999999999999999999999999998
2000000000000000000000000000
-2
mas deu
Quantidade de partes: 3
999999999999999999999999999

1

1000000000000000000000000000

NUMERO A 999999999 NUMERO B 2
RESULTADO MUL 1999999998
CARRY DA DIV 1
DEBBBUF 999999998
NUMERO A 999999999 NUMERO B 2
RESULTADO MUL 1999999999
CARRY DA DIV 1
DEBBBUF 999999999999999998
NUMERO A 999999999 NUMERO B 2
RESULTADO MUL 1999999999
CARRY DA DIV 1
DEBBBUF 999999999999999999999999998
CARRY1
1999999999999999999999999998 Armazenado em 0
Quantidade de partes: 4
termina um numero aq
Retorno BIG INT  1999999999999999999999999998
VALOR VERDADEIRO 1999999999999999999999999998
1999999999999999999999999998

NUMERO A 0 NUMERO B 2
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 000000000
NUMERO A 0 NUMERO B 2
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 000000000000000000
NUMERO A 0 NUMERO B 2
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 000000000000000000000000000
NUMERO A 1 NUMERO B 2
RESULTADO MUL 2
CARRY DA DIV 0
DEBBBUF 2000000000000000000000000000
2000000000000000000000000000 Armazenado em 0
Quantidade de partes: 4
termina um numero aq
Retorno BIG INT  2000000000000000000000000000
VALOR VERDADEIRO 2000000000000000000000000000
2000000000000000000000000000

NUMERO A 0 NUMERO B 2
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 000000000
NUMERO A 0 NUMERO B 2
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 000000000000000000
NUMERO A 0 NUMERO B 2
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 000000000000000000000000000
NUMERO A 1 NUMERO B 2
RESULTADO MUL 2
CARRY DA DIV 0
DEBBBUF 2000000000000000000000000000
2000000000000000000000000000 Armazenado em 0
Quantidade de partes: 4
termina um numero aq
Retorno BIG INT  2000000000000000000000000000
VALOR VERDADEIRO 2000000000000000000000000000
NUMERO A 999999999 NUMERO B 2
RESULTADO MUL 1999999998
CARRY DA DIV 1
DEBBBUF 999999998
NUMERO A 999999999 NUMERO B 2
RESULTADO MUL 1999999999
CARRY DA DIV 1
DEBBBUF 999999999999999998
NUMERO A 999999999 NUMERO B 2
RESULTADO MUL 1999999999
CARRY DA DIV 1
DEBBBUF 999999999999999999999999998
CARRY1
1999999999999999999999999998 Armazenado em 0
Quantidade de partes: 4
termina um numero aq
Retorno BIG INT  1999999999999999999999999998
VALOR VERDADEIRO 1999999999999999999999999998
TO AQ-0000000000000000000000000002


Teste 2 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(8251510);
    a = a - BigInt(1831895733);
    std::cout << a.abs() << std::endl;
    a = a + BigInt(-1874761413);
    a = a ^ BigInt(23);
    a = a + BigInt(-882152594);
    std::cout << a << std::endl;
    a = a ^ BigInt(25);
    return 0;
}
deveria ser
1823644223
-11596701320033832309961407350000788387760378890698500204627191525667233461130887966351696826388415914203617774176686887142802891123250857897875714130914638751203652727397074348750052158157841928989191001189910179004847250

mas deu
TO AQ22031

DEBBUGa+b com eles tamanho =< 874761413
FUI INSERIDO EM 1
TO AQ-5


Teste 3 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(-16804061);
    a = a * BigInt(1319790912);
    a = a ^ BigInt(13);
    a = a * BigInt(239465954);
    a = a + BigInt(-1711793151);
    a = a * BigInt(-1013085507);
    std::cout << a << std::endl;
    a = a + BigInt(-193844212);
    a = a - BigInt(171289220);
    a = a + BigInt(-1071889661);
    std::cout << a << std::endl;
    a = a ^ BigInt(22);
    return 0;
}
deveria ser
76180155819995495119166822758523635046186244797636418171851949837150857980145199851122049231604456705417108094869707610484725580036803945854234507574286071320809797855776859165317559985649781367967629326441696167438572488824600253
76180155819995495119166822758523635046186244797636418171851949837150857980145199851122049231604456705417108094869707610484725580036803945854234507574286071320809797855776859165317559985649781367967629326441696167438572487387577160

mas deu
NUMERO A 16804061 NUMERO B 1319790912
RESULTADO MUL 22177846992493632
CARRY DA DIV 22177846
DEBBBUF 992493632
CARRY22177846
22177846992493632 Armazenado em 0
Quantidade de partes: 2
termina um numero aq
Retorno BIG INT  22177846992493632
VALOR VERDADEIRO 22177846992493632
NUMERO A 0 NUMERO B 239465954
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
TO AQNUMERO A 1597613302 NUMERO B 1013085507
RESULTADO MUL 1618518882046614114
CARRY DA DIV 1618518882
DEBBBUF 46614114
CARRY1618518882
161851888246614114 Armazenado em 0
Quantidade de partes: 2
termina um numero aq
Retorno BIG INT  161851888246614114
VALOR VERDADEIRO 161851888246614114
161851888246614114

1597613303999999999


Teste 4 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(-2899486);
    a = a ^ BigInt(25);
    a = a * BigInt(1751645637);
    a = a + BigInt(1568822851);
    a = a / (324133967);
    a = a - BigInt(-1030625007);
    a = a + BigInt(1052157201);
    a = a - BigInt(-1059607805);
    std::cout << a.abs() << std::endl;
    a = a ^ BigInt(16);
    a = a / (1361853268);
    std::cout << a << std::endl;
    std::cout << a.abs() << std::endl;
    a = a - BigInt(750721208);
    a = a / (-1182355236);
    std::cout << a.abs() << std::endl;
    a = a * BigInt(887307036);
    a = a + BigInt(-1514290338);
    a = a * BigInt(960126298);
    return 0;
}
deveria ser
1953201775049164572110815013409365946319588119407876321208080097012902909500920468744512433235367554653949930582527684703492208683044775287079085252091150614139828




mas deu
NUMERO A 0 NUMERO B 1751645637
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
DEBBUGa+b com eles tamanho =< 568822851
FUI INSERIDO EM 1
ooiDEBBUGa+b com eles tamanho =< 30625007
FUI INSERIDO EM 1
1000000000

ooi21877

5

TO AQooi21877

NUMERO A 0 NUMERO B 887307036
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
TO AQNUMERO A 1459661804 NUMERO B 960126298
RESULTADO MUL 1401459684206521592
CARRY DA DIV 1401459684
DEBBBUF 206521592
CARRY1401459684
1401459684206521592 Armazenado em 0
Quantidade de partes: 3
termina um numero aq
Retorno BIG INT  1401459684206521592
VALOR VERDADEIRO 1401459684206521592

Teste 5 deu errado! +0.020
O resultado para
#include<iostream>
int main() {
    BigInt a(15383634);
    a = a + BigInt(1326785258);
    std::cout << a << std::endl;
    std::cout << a.abs() << std::endl;
    std::cout << a << std::endl;
    a = a - BigInt(-766533789);
    a = a + BigInt(1338056168);
    a = a / (-146183701);
    a = a - BigInt(806608050);
    a = a / (652790278);
    a = a ^ BigInt(26);
    std::cout << a << std::endl;
    a = a - BigInt(1581621190);
    std::cout << a << std::endl;
    return 0;
}
deveria ser
1342168892
1342168892
1342168892
1
-1581621189

mas deu
DEBBUGa+b com eles tamanho =< 342168892
FUI INSERIDO EM 1
1342168892

1342168892

1342168892

ooiTO AQooi22025

TO AQ-22025


Teste 6 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(-18695625);
    a = a ^ BigInt(25);
    a = a / (-1463464368);
    std::cout << a << std::endl;
    a = a ^ BigInt(25);
    return 0;
}
deveria ser
42473451585366658779143458593641279829479547264662186461190604208799926399493052443048459519761261065874975261749233988979920190527070431171827035363360261342971350133497737

mas deu
ooi21917


Teste 7 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(-17299203);
    a = a ^ BigInt(14);
    std::cout << a << std::endl;
    a = a / (-535219136);
    std::cout << a << std::endl;
    a = a * BigInt(-213960232);
    a = a + BigInt(1669198712);
    std::cout << a << std::endl;
    a = a / (-1532852138);
    a = a * BigInt(-925545);
    a = a + BigInt(1450615796);
    std::cout << a << std::endl;
    a = a / (-1268131391);
    a = a * BigInt(1339074756);
    std::cout << a.abs() << std::endl;
    a = a - BigInt(-1946449521);
    std::cout << a << std::endl;
    a = a / (1652644720);
    std::cout << a << std::endl;
    return 0;
}
deveria ser
214963799640513156768246593414875772422818161610823790938350775932080317869503605579052453548526805369
-401636984146458389649667894936543846636339552722613772423769945198820988847273961406066866690
85934342307756559027789341523574546704483630331306674394185019789367024900232149350001113006174670792
51887653661760130203357739714642198469896580223831893139953968698414473595681780410673101960847386
54790416560655861000281394098142005179162335323392462012953935690454806206280578348263333647203008
-54790416560655861000281394098142005179162335323392462012953935690454806206280578348263331700753487
-33153173151853146634130410133245096489439263947421477262792414143588469641727096885205509

mas deu
5

ooi21935

NUMERO A 0 NUMERO B 213960232
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
TO AQ1520971953

ooiNUMERO A 0 NUMERO B 925545
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
TO AQ1520971953

ooiNUMERO A 0 NUMERO B 1339074756
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
21935

DEBBUGa+b com eles tamanho =< 946449521
FUI INSERIDO EM 1
1946449521

ooi21935


Teste 8 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(14892251);
    a = a / (-623285573);
    a = a ^ BigInt(20);
    a = a + BigInt(-545544953);
    a = a / (1098987204);
    std::cout << a.abs() << std::endl;
    a = a * BigInt(-1310640192);
    a = a ^ BigInt(30);
    a = a / (1312198376);
    a = a + BigInt(-935751733);
    std::cout << a.abs() << std::endl;
    a = a / (-173845683);
    std::cout << a << std::endl;
    std::cout << a.abs() << std::endl;
    std::cout << a << std::endl;
    a = a / (596109068);
    a = a + BigInt(-1719529013);
    a = a * BigInt(376455084);
    a = a - BigInt(-194899667);
    a = a + BigInt(649072860);
    a = a ^ BigInt(20);
    return 0;
}
deveria ser
0
935751733
5
5
5

mas deu
ooiTO AQooi5

NUMERO A 0 NUMERO B 1310640192
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
ooiTO AQ1500574641

ooi5

0

5

ooiTO AQNUMERO A 0 NUMERO B 376455084
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
TO AQDEBBUGa+b com eles tamanho =< 649072860
FUI INSERIDO EM 1

Teste 9 deu errado! +0.033
O resultado para
#include<iostream>
int main() {
    BigInt a(-3598140);
    std::cout << a.abs() << std::endl;
    a = a ^ BigInt(10);
    a = a + BigInt(-780900447);
    a = a - BigInt(-1425133485);
    std::cout << a << std::endl;
    a = a * BigInt(2113557870);
    a = a ^ BigInt(16);
    a = a - BigInt(-1040249784);
    std::cout << a << std::endl;
    a = a ^ BigInt(30);
    return 0;
}
deveria ser
3598140
363731214726913703031192466849498763123262451731642869760644233038


mas deu
3598140

TO AQTO AQ21869

NUMERO A 0 NUMERO B 2113557870
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
DEBBUGa+b com eles tamanho =< 40249784
FUI INSERIDO EM 1
1040249784


Teste 10 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(-13145784);
    a = a * BigInt(977700738);
    a = a / (-1702597518);
    a = a ^ BigInt(22);
    a = a / (-790562636);
    a = a ^ BigInt(23);
    a = a + BigInt(-416599203);
    std::cout << a << std::endl;
    a = a * BigInt(2137701319);
    a = a - BigInt(1301920088);
    std::cout << a << std::endl;
    a = a - BigInt(1135794142);
    std::cout << a.abs() << std::endl;
    a = a / (546642904);
    a = a + BigInt(1711086615);
    a = a - BigInt(1404810236);
    a = a * BigInt(-1768522086);
    return 0;
}
deveria ser
-358875937721911570748609737555225135285139205430493571108017335793595522397226005891077935583780020257372949481054022118589284165918914896874790822730842256976490811973831878077032242957679638386941315506554586413314499943371846526679140600732543881758868607180200254965777560630419789032747927788088928765435975791052906947224696045434209418884285217950475043986090102140004918133040807134756991421164350761364033786144309267564635055432403551547636485888245018467732230360515993629696408129284806510690996918209942568692508215516722366170373442258324609556980448491759619887886922743377276266351029157956498563313204909713069092033844994003787112012280371780192802111826997407919523819153820209934882123990967442997612007991268840924961306913837445205291803001343436089659251680124307820542384928079902275419197577291663901088470657344553963848724202985349887509249380696057004589825691090523281770798090135012287084422143235635683283389043118440641708007072376515048789033015104698352516261746431799801634318494770572115435808484087565619234509346440096204978630734177735083680649538638501630766852063273206419299649429161648972602670529784318763693179752682236642228412212469693007204896474871413665196494695657476677778381807436343344969137827537723988463446229649789191162858656329778918813836874498070052655831701519720142407738427119986247599668532193799218245293716855174176602959096577216665229958393868577396931454524765620731221723601305002366953921827427031520956554409503157797038701382351572833429338963641301004042856324200057580418186927409987666541683128449379768532947003985379783004659535127600141217979112549500670828996058992339973060054832890423953343282954616510583650473320629908021343044345917160297528934621261586383285063389057447986794224133535566711147990898040608881177303594212959254863500023806038003754286161241175145202858705313778459657386328962257107881759572219661637416399234101968525799964678035799501413291580182355667797896703855633333516699922023245681709954512836739674867871255853524652768143538066199672246492970372747692797472211720276495699657019900061334908710129637286154950745894912550892238892932473776172958190654125273718043884249992598899089725606747005403394086291633077291405870544186186868866322506851127954935965009830193694030920962258752048293416605874227899081534551892333279014313210239244418273213435442968563793967776056080745434310367148930531588707963141259416460668822126257121470792137761391835998486156775389632980387683186956891531942946029973114034695585932045614640130090801471831937348986087219899822633352972031271509729705895862891846574868576103027567478962003262866427081595927664475985522400878912532963627450024565357372622779019019207510615243411458188501070735835753838894739435187181008161799517713501210255113773211880655433937325267805654093315019268207308933720290150079347042617649685623957160781937829996748495465261090970777900410473167934254308755559945762419967965146221465567341182249765897334966161193772696328629011216563224121531269006249360269313081506982136767022796020731497426969676182054274606387956445185641698970506266634755249342053968210572012771090184335740924414176298544470081385488703311582498326116138084645238659849525462768301798388774745348040919287128611114765475

767169565425492219990664853388048607040995520547378069778628950200835059981044074734459073229243584310032873580569548593163487180750679222097989319600816674719581360747841399249519009376160224159207482533956892521241885690771421627547567551972411422261313461516806955724478991220250854539006979427114455511169527058585867579866496125698793402471160018784932978205647828997533236159488350892794631305494717138346549263801253845616844275751487187483667007215826262573650547780486885102797609227534453404563931713482329348008222917728433668719208286238190856580117110398046100065274506871368701989205990347971066323416243145610903709578882836323442800343852494952328531148758557858719147114057038926666654420565012646982052503333173941728890965813674125966942513055860022100856784577154698911935471556162127231554719938897994369061509259898250045986096045189006192205024025813894196810859433824298167841643732964296654181575879947625327958367008264438433002413131480604684419665229123860591271139704296501979497621001937146613551748056265379535736662400202821611869713287265682668816699893524266400273950637137004819896127640956454072947723654442367006663359668612911057961807885872170989026983697591071347485171105083491466298584779442275177077397948220187092396249788407931262020786093446736093726733002065361814516770881380720052935890271461379972755672005233478552464133244063718369298884600056164450610863496887979414073956890179985602986423023963133681135520702713655658603402502890166557394766239100080567746465195874102199218438296769954709535906766312887888539888192166285555924795505376644618844994471388197655186260215411517036822529698753726971306903682482183867531130431873931813847076652484864288073706049742605832762035980535658655580919559786716728143907511840613091833552146941404120855836166212483766014961165846698840789664478788706785010167576919896522083383043515184920735962733574846440038736394970367898099070022390538923390735775087415971578689609257939762639016331836289442452423937521100834624679534360266121021477442505441748678695715890050664547363146860282323901854639287970363815250388714287605018647879588395431993708284848969257843496293177070418298445461092504406822054328891148750135665342423847989867276826650059451156017657575042765904384962051853025755382167805283472930788377393840127973195300124314796536492369407557098506036063314955248097900559118580427485428499709643066816552178312873637889142052681476233101255572867357035089795539341991205161100651480111870623974366361019339406506165810411754784371805437896102273817252921962628893891184701703819215596313627068180543577442187387093910893138579125911864893144935193378903695061262898081001977378942119946857162089198402885981776912342180229272089544908391548764597992760951853039228594429715401270453039490104143591712337588320174990937265772157179073054347830887328127662498945638268560603043570560047024467354152847610908163519132507163941108193744639893626151030823654809418328618343946174175747604294507527896694739312998851490010054403076690616769561430221476303026756585673394478182947380306955663740318587897459750652188282881987760682650012923861445244332122466512962463975697051473133796548528769574649053760530732260330230122923283884145805755847924396187226067371702672218720875755

mas deu
NUMERO A 13145784 NUMERO B 977700738
RESULTADO MUL 12852642718388592
CARRY DA DIV 12852642
DEBBBUF 718388592
CARRY12852642
12852642718388592 Armazenado em 0
Quantidade de partes: 2
termina um numero aq
Retorno BIG INT  12852642718388592
VALOR VERDADEIRO 12852642718388592
ooiooiTO AQ--1860870098

NUMERO A 18446744071848681518 NUMERO B 2137701319
RESULTADO MUL 14468759610727292354
CARRY DA DIV 14468759610
DEBBBUF 727292354
CARRY14468759610
14468759610727292354 Armazenado em 0
Quantidade de partes: 3
termina um numero aq
Retorno BIG INT  14468759610727292354
VALOR VERDADEIRO 14468759610727292354
-14468759612000000000

0000000015000000000

ooiDEBBUGa+b com eles tamanho =< 711086615
FUI INSERIDO EM 1
NUMERO A 0 NUMERO B 1768522086
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 000000000
NUMERO A 0 NUMERO B 1768522086
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0000000000
0000000000 Armazenado em 0
Quantidade de partes: 2
termina um numero aq
Retorno BIG INT  0000000000
VALOR VERDADEIRO 0000000000

Teste 11 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(10413712);
    a = a + BigInt(-1975847711);
    a = a / (-1176748768);
    std::cout << a << std::endl;
    a = a ^ BigInt(22);
    a = a / (1862382606);
    std::cout << a.abs() << std::endl;
    a = a + BigInt(-1322138273);
    std::cout << a << std::endl;
    a = a + BigInt(2060382647);
    std::cout << a << std::endl;
    return 0;
}
deveria ser
1
0
-1322138273
738244374

mas deu
TO AQooi21962

ooi5

TO AQ-5

TO AQ5


Teste 12 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(16037156);
    a = a * BigInt(-478464448);
    a = a + BigInt(218369815);
    std::cout << a << std::endl;
    a = a * BigInt(1287455962);
    a = a + BigInt(-43964403);
    a = a ^ BigInt(20);
    a = a * BigInt(650434898);
    a = a - BigInt(555443298);
    std::cout << a << std::endl;
    a = a ^ BigInt(23);
    return 0;
}
deveria ser
-7673208774660073


mas deu
NUMERO A 16037156 NUMERO B 478464448
RESULTADO MUL 7673208993029888
CARRY DA DIV 7673208
DEBBBUF 993029888
CARRY7673208
7673208993029888 Armazenado em 0
Quantidade de partes: 2
termina um numero aq
Retorno BIG INT  7673208993029888
VALOR VERDADEIRO 7673208993029888
TO AQ-954904082007673209

NUMERO A 7673209 NUMERO B 1287455962
RESULTADO MUL 9878918674722058
CARRY DA DIV 9878918
DEBBBUF 674722058
NUMERO A 954904082 NUMERO B 1287455962
RESULTADO MUL 1229396953518915802
CARRY DA DIV 1229396953
DEBBBUF 518915802674722058
CARRY1229396953
1229396953518915802674722058 Armazenado em 0
Quantidade de partes: 4
termina um numero aq
Retorno BIG INT  1229396953518915802674722058
VALOR VERDADEIRO 1229396953518915802674722058
NUMERO A 0 NUMERO B 650434898
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
TO AQ-21994


Teste 13 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(3339403);
    a = a - BigInt(1399614793);
    std::cout << a.abs() << std::endl;
    a = a ^ BigInt(10);
    std::cout << a << std::endl;
    a = a / (33788506);
    a = a ^ BigInt(17);
    std::cout << a.abs() << std::endl;
    std::cout << a << std::endl;
    a = a * BigInt(1309225819);
    std::cout << a.abs() << std::endl;
    a = a / (-1058714683);
    std::cout << a << std::endl;
    a = a ^ BigInt(23);
    return 0;
}
deveria ser
1396275390
28165069968659052873933757616721052382866777632639305109551437053102841063391666010000000000





mas deu
TO AQ22031

5

ooi5

5

NUMERO A 0 NUMERO B 1309225819
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
22031

ooi22031


Teste 14 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(-18312388);
    a = a * BigInt(-2114587731);
    a = a / (418079893);
    a = a ^ BigInt(24);
    a = a + BigInt(-550820940);
    std::cout << a.abs() << std::endl;
    a = a * BigInt(519879777);
    a = a - BigInt(176240476);
    std::cout << a << std::endl;
    a = a * BigInt(1555161879);
    a = a - BigInt(1076637857);
    return 0;
}
deveria ser
158881658363505200876117322261985025118823580336808781419581334324928122231176025027988709828564645970854018187779317536803581213492011255721454252932440041505340332898268263988211491317425076
82599361119409268769816078123397910436113401447841734176053687522206077726572534339297189224191896377411535475016655726245635094071616202905959611130218524843667076576257468768368520734940384548847576

mas deu
NUMERO A 18312388 NUMERO B 2114587731
RESULTADO MUL 38723150990111628
CARRY DA DIV 38723150
DEBBBUF 990111628
CARRY38723150
38723150990111628 Armazenado em 0
Quantidade de partes: 2
termina um numero aq
Retorno BIG INT  38723150990111628
VALOR VERDADEIRO 38723150990111628
ooiTO AQ628951583

NUMERO A 628951583 NUMERO B 519879777
RESULTADO MUL 326979208713836991
CARRY DA DIV 326979208
DEBBBUF 713836991
CARRY326979208
326979208713836991 Armazenado em 0
Quantidade de partes: 2
termina um numero aq
Retorno BIG INT  326979208713836991
VALOR VERDADEIRO 326979208713836991
-326979208000000000

NUMERO A 326979208 NUMERO B 1555161879
RESULTADO MUL 508505599507211832
CARRY DA DIV 508505599
DEBBBUF 507211832
NUMERO A 0 NUMERO B 1555161879
RESULTADO MUL 508505599
CARRY DA DIV 0
DEBBBUF 508505599507211832
508505599507211832 Armazenado em 0
Quantidade de partes: 2
termina um numero aq
Retorno BIG INT  508505599507211832
VALOR VERDADEIRO 508505599507211832

Teste 15 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(-17036132);
    a = a ^ BigInt(28);
    std::cout << a.abs() << std::endl;
    a = a - BigInt(3755569);
    std::cout << a << std::endl;
    a = a ^ BigInt(28);
    return 0;
}
deveria ser
30087624480973615271701464397801914912397345460591279800246189485934751305354730307835391404912499026130211617945874250139010030583236693085575545880558014882464958296861441963674628359178573063364018176
30087624480973615271701464397801914912397345460591279800246189485934751305354730307835391404912499026130211617945874250139010030583236693085575545880558014882464958296861441963674628359178573063360262607

mas deu
5

TO AQ-21879


Teste 16 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(-384979);
    a = a + BigInt(-1878771214);
    a = a ^ BigInt(26);
    a = a - BigInt(-679926142);
    a = a * BigInt(886529289);
    std::cout << a << std::endl;
    a = a ^ BigInt(24);
    return 0;
}
deveria ser
11768685513003876802715974991990446347121041509771103408477465123355162753249793307326249443980346649429741884412584166327911611463057146367246054245049790289298426024626416274976274513916117879597961243699307974920782550314693838963564945646822578999

mas deu
DEBBUGa+b com eles tamanho =< 879156193
FUI INSERIDO EM 1
DEBBUGa+b com eles tamanho =< 679926142
FUI INSERIDO EM 1
NUMERO A 0 NUMERO B 886529289
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
21848


Teste 17 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(-5019856);
    a = a + BigInt(1261599972);
    a = a - BigInt(822140781);
    std::cout << a.abs() << std::endl;
    a = a ^ BigInt(19);
    a = a + BigInt(1328363516);
    a = a / (1933680063);
    a = a ^ BigInt(26);
    a = a - BigInt(-1361016634);
    a = a * BigInt(1902508104);
    a = a - BigInt(-105883070);
    a = a + BigInt(-749214281);
    a = a - BigInt(-116995691);
    std::cout << a << std::endl;
    a = a ^ BigInt(22);
    return 0;
}
deveria ser
434439335


mas deu
TO AQTO AQ22027

DEBBUGa+b com eles tamanho =< 328363516
FUI INSERIDO EM 1
ooiDEBBUGa+b com eles tamanho =< 361016634
FUI INSERIDO EM 1
NUMERO A 361016634 NUMERO B 1902508104
RESULTADO MUL 686837071863801936
CARRY DA DIV 686837071
DEBBBUF 863801936
NUMERO A 1 NUMERO B 1902508104
RESULTADO MUL 2589345175
CARRY DA DIV 2
DEBBBUF 589345175863801936
CARRY2
2589345175863801936 Armazenado em 0
Quantidade de partes: 3
termina um numero aq
Retorno BIG INT  2589345175863801936
VALOR VERDADEIRO 2589345175863801936
1625653381000000000116995692


Teste 18 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(-15331326);
    a = a + BigInt(-1604672872);
    std::cout << a.abs() << std::endl;
    a = a + BigInt(550603632);
    a = a - BigInt(-736314577);
    std::cout << a.abs() << std::endl;
    std::cout << a << std::endl;
    a = a * BigInt(2031283004);
    std::cout << a.abs() << std::endl;
    a = a ^ BigInt(17);
    std::cout << a.abs() << std::endl;
    a = a / (786401993);
    std::cout << a << std::endl;
    a = a / (1575315955);
    a = a - BigInt(-1723163649);
    std::cout << a << std::endl;
    return 0;
}
deveria ser
1620004198
333085989
-333085989
676591908326230956
1304834985094895656512904460597070822182133994450923755701490988844267575701803705921627460798532119396243016131843015987063219706436162685620057559941398490992357401893590965895102262147450868254398093606732685793602980281797884711666795405357587959298057538870838109910655209162453516950623032900059136
-1659246793255387459976725237771708981645642897615245178684956599346089876582756455350981620412210882324458982051235742464685258886972534269276778854681003448311908591378138796114549346198631605266542214379577094730993363952217100639604807569908572140785581069694514507557530069945351113766344476
-1053278733062401732595113110354874163415454582642911896797843705801919511811683806218405005878462573131533465647680653665876988395621584540656022781589235823052340374079521587854767424226736537602415265564663880225217019370705923333078161815423606333489830660475037534649695125592011111

mas deu
DEBBUGa+b com eles tamanho =< 620004198
FUI INSERIDO EM 1
1620004198

TO AQTO AQ999999999999999999

-999999999999999999

NUMERO A 999999999 NUMERO B 2031283004
RESULTADO MUL 2031283001968716996
CARRY DA DIV 2031283001
DEBBBUF 968716996
NUMERO A 999999999 NUMERO B 2031283004
RESULTADO MUL 2031283003999999997
CARRY DA DIV 2031283003
DEBBBUF 999999997968716996
CARRY2031283003
2031283003999999997968716996 Armazenado em 0
Quantidade de partes: 4
termina um numero aq
Retorno BIG INT  2031283003999999997968716996
VALOR VERDADEIRO 2031283003999999997968716996
2031283003999999997968716996

5

ooi5

ooiDEBBUGa+b com eles tamanho =< 723163649
FUI INSERIDO EM 1
1723163649


Teste 19 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(15810859);
    a = a / (-1571019710);
    std::cout << a << std::endl;
    a = a * BigInt(1395833231);
    a = a / (212997654);
    std::cout << a << std::endl;
    a = a + BigInt(-2078556590);
    a = a - BigInt(398951566);
    std::cout << a.abs() << std::endl;
    a = a ^ BigInt(12);
    a = a - BigInt(-2129991771);
    return 0;
}
deveria ser
0
0
2477508156

mas deu
ooi5

NUMERO A 0 NUMERO B 1395833231
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
ooi21967

TO AQDEBBUGa+b com eles tamanho =< 953317155
FUI INSERIDO EM 1
1953317155

DEBBUGa+b com eles tamanho =< 129991771
FUI INSERIDO EM 1

Teste 20 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(20746913);
    a = a / (-704466216);
    a = a + BigInt(298022095);
    a = a / (357548310);
    a = a * BigInt(2093870812);
    a = a - BigInt(1235297312);
    std::cout << a.abs() << std::endl;
    std::cout << a << std::endl;
    a = a - BigInt(-2006573716);
    a = a * BigInt(-802536325);
    std::cout << a << std::endl;
    a = a ^ BigInt(16);
    a = a / (25269537);
    return 0;
}
deveria ser
1235297312
-1235297312
-618977330825375300

mas deu
ooiDEBBUGa+b com eles tamanho =< 298022095
FUI INSERIDO EM 1
ooiNUMERO A 0 NUMERO B 2093870812
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
TO AQ22005

-22005

TO AQNUMERO A 0 NUMERO B 802536325
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
-22005

ooi
Nota exercicio 6: 0.1
Procurando exercício 7...
Procurando exercício 8...
Exercício 8...
Compilando...
g++ -O2 -Wno-unused-result  "ex8.cpp"  > comp.log 2>&1
Teste 1: correto! +0.100
Teste 2: correto! +0.100
Teste 3 deu errado! +0.099
O resultado para
#include<iostream>
int main() {
    const int n = 117; 
    C* objetos[n];
    
        objetos[0] = new C(-4342.900906203137, 4205.75272071737);
    objetos[1] = new R(3214.463074856256);
    objetos[2] = new C(500.6485747203933, 4784.146418953638);
    objetos[3] = new R(5153.409862532562);
    objetos[4] = new N(768155296);
    objetos[5] = new Q(-891721281, 1227082629);
    objetos[6] = new N(533592292);
    objetos[7] = new Q(-1259562321, 1988206267);
    objetos[8] = new C(-6480.599237400642, 2451.14974250281);
    objetos[9] = new Z(-1999198902);
    objetos[10] = new N(2055808593);
    objetos[11] = new Q(1151098270, 2063507255);
    objetos[12] = new Z(962936815);
    objetos[13] = new N(530510854);
    objetos[14] = new Z(-1251764629);
    objetos[15] = new N(1112176835);
    objetos[16] = new Z(-2126156362);
    objetos[17] = new N(659526714);
    objetos[18] = new Z(-167532090);
    objetos[19] = new C(-361.22135473490016, -1437.9135121192448);
    objetos[20] = new Z(-1046177637);
    objetos[21] = new N(65396152);
    objetos[22] = new Q(-214144613, 1017210016);
    objetos[23] = new N(759487194);
    objetos[24] = new Z(-17248389);
    objetos[25] = new Q(-227948957, 1157792389);
    objetos[26] = new C(7691.312399928451, -4456.709570498014);
    objetos[27] = new Z(964273882);
    objetos[28] = new R(1023.7152265426339);
    objetos[29] = new Q(-700010567, 1784660520);
    objetos[30] = new R(-4292.434980827476);
    objetos[31] = new N(900946110);
    objetos[32] = new C(-9097.987009943807, -1261.7743950462063);
    objetos[33] = new Z(1359953997);
    objetos[34] = new Q(-1385709855, 2127949310);
    objetos[35] = new Z(-1378622931);
    objetos[36] = new R(-3635.99811149784);
    objetos[37] = new C(4182.592356402252, -1486.2020134876693);
    objetos[38] = new R(92.68985464499747);
    objetos[39] = new Z(-1042493212);
    objetos[40] = new C(3097.8599715643577, 1080.1800261093267);
    objetos[41] = new Z(-1477676661);
    objetos[42] = new Q(-40048839, 2038241877);
    objetos[43] = new N(1390512905);
    objetos[44] = new Q(-245917724, 74757785);
    objetos[45] = new C(-6191.615061601216, -4703.397902063313);
    objetos[46] = new N(1450607740);
    objetos[47] = new C(-4568.432902605672, -5249.416560901712);
    objetos[48] = new Z(1166697916);
    objetos[49] = new N(1886553695);
    objetos[50] = new Q(-208296815, 671498868);
    objetos[51] = new C(1338.0162619164275, 6856.160710896638);
    objetos[52] = new R(9904.817661275309);
    objetos[53] = new Z(1543226007);
    objetos[54] = new N(893975808);
    objetos[55] = new C(-648.1237494726556, 842.8130845516298);
    objetos[56] = new N(1337862351);
    objetos[57] = new Q(-183550290, 499236220);
    objetos[58] = new R(3736.9627672273054);
    objetos[59] = new Q(-99914332, 280344048);
    objetos[60] = new R(9891.659883594704);
    objetos[61] = new Q(531893161, 2036089518);
    objetos[62] = new C(9800.643091838836, 6324.264104309577);
    objetos[63] = new N(1049348647);
    objetos[64] = new Z(-1908309931);
    objetos[65] = new C(-1520.4703124891366, 580.9218866289448);
    objetos[66] = new R(2426.7411372732204);
    objetos[67] = new N(226826753);
    objetos[68] = new Q(-2088352418, 1736296032);
    objetos[69] = new N(238878310);
    objetos[70] = new Q(-755685127, 34491285);
    objetos[71] = new N(223982276);
    objetos[72] = new C(-5839.1922716997005, 7700.886106214966);
    objetos[73] = new N(761252057);
    objetos[74] = new Q(128623359, 1338991520);
    objetos[75] = new C(-4645.164401497311, 7333.550397612322);
    objetos[76] = new R(-8811.701489205572);
    objetos[77] = new Q(-1343024111, 1412009976);
    objetos[78] = new R(4019.631750773764);
    objetos[79] = new C(4283.795729091451, 8397.195341073697);
    objetos[80] = new Q(-1005318909, 2095375045);
    objetos[81] = new R(-8307.818070891757);
    objetos[82] = new Q(948963111, 1904564146);
    objetos[83] = new R(2025.9190242191562);
    objetos[84] = new C(369.7382598045351, -1726.9799532808556);
    objetos[85] = new Z(-1536076293);
    objetos[86] = new R(-7821.82258883077);
    objetos[87] = new N(1068400517);
    objetos[88] = new Z(1773771734);
    objetos[89] = new Q(834809393, 1237059644);
    objetos[90] = new Z(248887170);
    objetos[91] = new C(-1837.6579041976383, 8910.643955840482);
    objetos[92] = new R(1738.4812727623303);
    objetos[93] = new Z(1545944033);
    objetos[94] = new N(1637633372);
    objetos[95] = new C(2737.77360779192, 1080.4509117165144);
    objetos[96] = new Z(1768063724);
    objetos[97] = new Q(782067570, 1616323156);
    objetos[98] = new N(879899016);
    objetos[99] = new Q(1736843487, 2104758161);
    objetos[100] = new N(1337992244);
    objetos[101] = new C(-8500.334926753922, 5061.101597545405);
    objetos[102] = new N(449725227);
    objetos[103] = new C(-4156.8852277966425, -5223.716952636304);
    objetos[104] = new Q(-2125768087, 1204064178);
    objetos[105] = new C(1729.5395975961965, -6522.520801863272);
    objetos[106] = new Z(-687857974);
    objetos[107] = new C(2001.9833374662612, -667.6486495776171);
    objetos[108] = new R(-2855.9348145730664);
    objetos[109] = new Z(1583270124);
    objetos[110] = new Q(-1087700678, 742441416);
    objetos[111] = new R(5715.94751678033);
    objetos[112] = new Z(-175333874);
    objetos[113] = new C(-1768.9250911019353, -2464.360835821347);
    objetos[114] = new Z(-1862137909);
    objetos[115] = new R(-3318.9346716019627);
    objetos[116] = new Q(1025819630, 510033921);
    for (int i = 0; i < n; ++i)
        std::cout << *objetos[i] << std::endl;
    
    for (int i = 0; i < n; ++i)
        delete objetos[i];
    return 0;
}
deveria ser
-4342.900906203137 + 4205.75272071737i
3214.463074856256
500.6485747203933 + 4784.146418953638i
5153.409862532562
768155296
-891721281/1227082629
533592292
-1259562321/1988206267
-6480.599237400642 + 2451.14974250281i
-1999198902
2055808593
1151098270/2063507255
+962936815
530510854
-1251764629
1112176835
-2126156362
659526714
-167532090
-361.22135473490016 + -1437.9135121192448i
-1046177637
65396152
-214144613/1017210016
759487194
-17248389
-227948957/1157792389
7691.312399928451 + -4456.709570498014i
+964273882
1023.7152265426339
-700010567/1784660520
-4292.434980827476
900946110
-9097.987009943807 + -1261.7743950462063i
+1359953997
-1385709855/2127949310
-1378622931
-3635.99811149784
4182.592356402252 + -1486.2020134876693i
92.68985464499747
-1042493212
3097.8599715643577 + 1080.1800261093267i
-1477676661
-40048839/2038241877
1390512905
-245917724/74757785
-6191.615061601216 + -4703.397902063313i
1450607740
-4568.432902605672 + -5249.416560901712i
+1166697916
1886553695
-208296815/671498868
1338.0162619164275 + 6856.160710896638i
9904.817661275309
+1543226007
893975808
-648.1237494726556 + 842.8130845516298i
1337862351
-183550290/499236220
3736.9627672273054
-99914332/280344048
9891.659883594704
531893161/2036089518
9800.643091838836 + 6324.264104309577i
1049348647
-1908309931
-1520.4703124891366 + 580.9218866289448i
2426.7411372732204
226826753
-2088352418/1736296032
238878310
-755685127/34491285
223982276
-5839.1922716997005 + 7700.886106214966i
761252057
128623359/1338991520
-4645.164401497311 + 7333.550397612322i
-8811.701489205572
-1343024111/1412009976
4019.631750773764
4283.795729091451 + 8397.195341073697i
-1005318909/2095375045
-8307.818070891757
948963111/1904564146
2025.9190242191562
369.7382598045351 + -1726.9799532808556i
-1536076293
-7821.82258883077
1068400517
+1773771734
834809393/1237059644
+248887170
-1837.6579041976383 + 8910.643955840482i
1738.4812727623303
+1545944033
1637633372
2737.77360779192 + 1080.4509117165144i
+1768063724
782067570/1616323156
879899016
1736843487/2104758161
1337992244
-8500.334926753922 + 5061.101597545405i
449725227
-4156.8852277966425 + -5223.716952636304i
-2125768087/1204064178
1729.5395975961965 + -6522.520801863272i
-687857974
2001.9833374662612 + -667.6486495776171i
-2855.9348145730664
+1583270124
-1087700678/742441416
5715.94751678033
-175333874
-1768.9250911019353 + -2464.360835821347i
-1862137909
-3318.9346716019627
1025819630/510033921

mas deu
-4342.9 + 4205.75i
3214.46
500.649 + 4784.15i
5153.41
768155296
-891721281/1227082629
533592292
-1259562321/1988206267
-6480.6 + 2451.15i
-1999198902
2055808593
1151098270/2063507255
+962936815
530510854
-1251764629
1112176835
-2126156362
659526714
-167532090
-361.221 + -1437.91i
-1046177637
65396152
-214144613/1017210016
759487194
-17248389
-227948957/1157792389
7691.31 + -4456.71i
+964273882
1023.72
-700010567/1784660520
-4292.43
900946110
-9097.99 + -1261.77i
+1359953997
-1385709855/2127949310
-1378622931
-3636
4182.59 + -1486.2i
92.6899
-1042493212
3097.86 + 1080.18i
-1477676661
-40048839/2038241877
1390512905
-245917724/74757785
-6191.62 + -4703.4i
1450607740
-4568.43 + -5249.42i
+1166697916
1886553695
-208296815/671498868
1338.02 + 6856.16i
9904.82
+1543226007
893975808
-648.124 + 842.813i
1337862351
-183550290/499236220
3736.96
-99914332/280344048
9891.66
531893161/2036089518
9800.64 + 6324.26i
1049348647
-1908309931
-1520.47 + 580.922i
2426.74
226826753
-2088352418/1736296032
238878310
-755685127/34491285
223982276
-5839.19 + 7700.89i
761252057
128623359/1338991520
-4645.16 + 7333.55i
-8811.7
-1343024111/1412009976
4019.63
4283.8 + 8397.2i
-1005318909/2095375045
-8307.82
948963111/1904564146
2025.92
369.738 + -1726.98i
-1536076293
-7821.82
1068400517
+1773771734
834809393/1237059644
+248887170
-1837.66 + 8910.64i
1738.48
+1545944033
1637633372
2737.77 + 1080.45i
+1768063724
782067570/1616323156
879899016
1736843487/2104758161
1337992244
-8500.33 + 5061.1i
449725227
-4156.89 + -5223.72i
-2125768087/1204064178
1729.54 + -6522.52i
-687857974
2001.98 + -667.649i
-2855.93
+1583270124
-1087700678/742441416
5715.95
-175333874
-1768.93 + -2464.36i
-1862137909
-3318.93
1025819630/510033921

Teste 4: correto! +0.100
Teste 5: correto! +0.100
Teste 6: correto! +0.100
Teste 7: correto! +0.100
Teste 8: correto! +0.100
Teste 9: correto! +0.100
Teste 10: correto! +0.100
Teste 11: correto! +0.100
Teste 12: correto! +0.100
Teste 13: correto! +0.100
Teste 14: correto! +0.100
Teste 15: correto! +0.100
Teste 16: correto! +0.100
Teste 17: correto! +0.100
Teste 18: correto! +0.100
Teste 19: correto! +0.100
Teste 20: correto! +0.100
Nota exercicio 8: 2.0
Nota total: 7.10
{"scores": {"ex1": 1.0, "ex2": 1.0, "ex3": 1.0, "ex4": 1.0, "ex5": 1.0, "ex6": 0.1, "ex7": 0.0, "ex8": 2.0}}
