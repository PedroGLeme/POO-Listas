Versão do G++:
g++ (Debian 12.2.0-14) 12.2.0
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Varificando data de envio...
AGORA: 2024-11-09 16:08:02.740662-03:00
PRAZO MÁXIMO: 2024-11-13 23:59:59-03:06
Testando sua solucao...
Procurando exercício 1...
Exercício 1...
Compilando...
g++ -O2 -Wno-unused-result  "ex1.cpp"  > comp.log 2>&1
Teste 1: correto! +0.050
Teste 2: correto! +0.050
Teste 3: correto! +0.050
Teste 4: correto! +0.050
Teste 5: correto! +0.050
Teste 6: correto! +0.050
Teste 7: correto! +0.050
Teste 8: correto! +0.050
Teste 9: correto! +0.050
Teste 10: correto! +0.050
Teste 11: correto! +0.050
Teste 12: correto! +0.050
Teste 13: correto! +0.050
Teste 14: correto! +0.050
Teste 15: correto! +0.050
Teste 16: correto! +0.050
Teste 17: correto! +0.050
Teste 18: correto! +0.050
Teste 19: correto! +0.050
Teste 20: correto! +0.050
Nota exercicio 1: 1.0
Procurando exercício 2...
Exercício 2...
Compilando...
g++ -O2 -Wno-unused-result  "ex2.cpp"  > comp.log 2>&1
Teste 1: correto! +0.050
Teste 2: correto! +0.050
Teste 3: correto! +0.050
Teste 4: correto! +0.050
Teste 5: correto! +0.050
Teste 6: correto! +0.050
Teste 7: correto! +0.050
Teste 8: correto! +0.050
Teste 9: correto! +0.050
Teste 10: correto! +0.050
Teste 11: correto! +0.050
Teste 12: correto! +0.050
Teste 13: correto! +0.050
Teste 14: correto! +0.050
Teste 15: correto! +0.050
Teste 16: correto! +0.050
Teste 17: correto! +0.050
Teste 18: correto! +0.050
Teste 19: correto! +0.050
Teste 20: correto! +0.050
Nota exercicio 2: 1.0
Procurando exercício 3...
Exercício 3...
Compilando...
g++ -O2 -Wno-unused-result  "ex3.cpp"  > comp.log 2>&1
Teste 1: correto! +0.050
Teste 2: correto! +0.050
Teste 3: correto! +0.050
Teste 4: correto! +0.050
Teste 5: correto! +0.050
Teste 6: correto! +0.050
Teste 7: correto! +0.050
Teste 8: correto! +0.050
Teste 9: correto! +0.050
Teste 10: correto! +0.050
Teste 11: correto! +0.050
Teste 12: correto! +0.050
Teste 13: correto! +0.050
Teste 14: correto! +0.050
Teste 15: correto! +0.050
Teste 16: correto! +0.050
Teste 17: correto! +0.050
Teste 18 deu errado! +0.043
O resultado para
#include<iostream>
int main() {
    Vetor v(-1, 3);
    std::cout << v << std::endl;
    v = v + Vetor(1,2);
    std::cout << v << std::endl;
    v = v + Vetor(1,2);
    std::cout << v << std::endl;
    v = v - Vetor(1,6);
    std::cout << v << std::endl;
    std::cout << v * Vetor(3, 2) << std::endl; 
    std::cout << (v ^ Vetor(-4501,9002)) << std::endl;
    std::cout << v.abs() << std::endl;
    return 0;
}

deveria ser
(-1,3)
(0,5)
(1,7)
(0,1)
2
4501
1.0
mas deu
(-1,3)
(0,5)
(1,7)
(0,1)
2
4501
1

Teste 19: correto! +0.050
Teste 20: correto! +0.050
Nota exercicio 3: 1.0
Procurando exercício 4...
Exercício 4...
Compilando...
g++ -O2 -Wno-unused-result  "ex4.cpp"  > comp.log 2>&1
Teste 1: correto! +0.050
Teste 2: correto! +0.050
Teste 3: correto! +0.050
Teste 4: correto! +0.050
Teste 5: correto! +0.050
Teste 6: correto! +0.051
Teste 7: correto! +0.050
Teste 8: correto! +0.050
Teste 9: correto! +0.050
Teste 10: correto! +0.050
Teste 11: correto! +0.050
Teste 12: correto! +0.050
Teste 13: correto! +0.050
Teste 14: correto! +0.050
Teste 15: correto! +0.050
Teste 16 deu errado!
O resultado para
#include<iostream>
int main() {
    double *v;
    Polinomio2 p1(1);
    v = p1.raizes();
    for(int i=0; i<=v[0]; i++) std::cout << v[i] << " ";
    std::cout << '\n' << p1(2) << '\n';
    
    Polinomio2 p2(1,1);
    v = p2.raizes();
    for(int i=0; i<=v[0]; i++) std::cout << v[i] << " ";
    std::cout << '\n' << p2(2) << '\n';
    return 0;
}

deveria ser
1 0
4
2 -1 0
6
mas deu
0 
4.45551e+09
2 -8.40862e+08 -8.40831e+08 
5.07802e+09

Teste 17: correto! +0.050
Teste 18: correto! +0.050
Teste 19: correto! +0.050
Teste 20: correto! +0.050
Nota exercicio 4: 1.0
Procurando exercício 5...
Exercício 5...
Compilando...
g++ -O2 -Wno-unused-result  "ex5.cpp"  > comp.log 2>&1
Teste 1: correto! +0.050
Teste 2: correto! +0.050
Teste 3: correto! +0.050
Teste 4: correto! +0.050
Teste 5: correto! +0.050
Teste 6: correto! +0.050
Teste 7: correto! +0.050
Teste 8: correto! +0.050
Teste 9: correto! +0.050
Teste 10: correto! +0.050
Teste 11: correto! +0.050
Teste 12: correto! +0.050
Teste 13: correto! +0.050
Teste 14: correto! +0.050
Teste 15: correto! +0.050
Teste 16: correto! +0.050
Teste 17: correto! +0.050
Teste 18: correto! +0.050
Teste 19: correto! +0.050
Teste 20: correto! +0.050
Nota exercicio 5: 1.0
Procurando exercício 6...
Exercício 6...
Compilando...
g++ -O2 -Wno-unused-result  "ex6.cpp"  > comp.log 2>&1
Teste 1 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a("999999999999999999999999999");
    std::cout << a << std::endl;
    BigInt b(1);
    std::cout << b << std::endl;
    BigInt c = a+b;
    std::cout << c << std::endl;
    std::cout << a*2 << std::endl;
    std::cout << c*2 << std::endl;
    std::cout << a*2-c*2 << std::endl;
    return 0;
}
deveria ser
999999999999999999999999999
1
1000000000000000000000000000
1999999999999999999999999998
2000000000000000000000000000
-2
mas deu
Quantidade de partes: 3
999999999999999999999999999

1

1000000000000000000000000000

NUMERO A 999999999 NUMERO B 2
RESULTADO MUL 1999999998
CARRY DA DIV 1
DEBBBUF 999999998
NUMERO A 999999999 NUMERO B 2
RESULTADO MUL 1999999999
CARRY DA DIV 1
DEBBBUF 999999999999999998
NUMERO A 999999999 NUMERO B 2
RESULTADO MUL 1999999999
CARRY DA DIV 1
DEBBBUF 999999999999999999999999998
CARRY1
1999999999999999999999999998 Armazenado em 0
Quantidade de partes: 4
termina um numero aq
Retorno BIG INT  1999999999999999999999999998
VALOR VERDADEIRO 1999999999999999999999999998
1999999999999999999999999998

NUMERO A 0 NUMERO B 2
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 000000000
NUMERO A 0 NUMERO B 2
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 000000000000000000
NUMERO A 0 NUMERO B 2
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 000000000000000000000000000
NUMERO A 1 NUMERO B 2
RESULTADO MUL 2
CARRY DA DIV 0
DEBBBUF 2000000000000000000000000000
2000000000000000000000000000 Armazenado em 0
Quantidade de partes: 4
termina um numero aq
Retorno BIG INT  2000000000000000000000000000
VALOR VERDADEIRO 2000000000000000000000000000
2000000000000000000000000000

NUMERO A 0 NUMERO B 2
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 000000000
NUMERO A 0 NUMERO B 2
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 000000000000000000
NUMERO A 0 NUMERO B 2
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 000000000000000000000000000
NUMERO A 1 NUMERO B 2
RESULTADO MUL 2
CARRY DA DIV 0
DEBBBUF 2000000000000000000000000000
2000000000000000000000000000 Armazenado em 0
Quantidade de partes: 4
termina um numero aq
Retorno BIG INT  2000000000000000000000000000
VALOR VERDADEIRO 2000000000000000000000000000
NUMERO A 999999999 NUMERO B 2
RESULTADO MUL 1999999998
CARRY DA DIV 1
DEBBBUF 999999998
NUMERO A 999999999 NUMERO B 2
RESULTADO MUL 1999999999
CARRY DA DIV 1
DEBBBUF 999999999999999998
NUMERO A 999999999 NUMERO B 2
RESULTADO MUL 1999999999
CARRY DA DIV 1
DEBBBUF 999999999999999999999999998
CARRY1
1999999999999999999999999998 Armazenado em 0
Quantidade de partes: 4
termina um numero aq
Retorno BIG INT  1999999999999999999999999998
VALOR VERDADEIRO 1999999999999999999999999998
B: 0 A: 999999998 DEBBUG a - b:999999998
B: 0 A: 999999999 DEBBUG a - b:999999999
B: 0 A: 999999999 DEBBUG a - b:999999999
B: 2 A: 1 DEBBUG a - b:0000000-1
1000000000000000000999999998


Teste 2 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(19204595);
    a = a / (-844326198);
    std::cout << a << std::endl;
    a = a - BigInt(2036073398);
    a = a * BigInt(1103762471);
    a = a + BigInt(731720855);
    a = a * BigInt(1590423911);
    a = a / (-152564981);
    std::cout << a.abs() << std::endl;
    a = a + BigInt(1187251693);
    a = a / (2144851306);
    a = a * BigInt(-921364237);
    std::cout << a.abs() << std::endl;
    a = a - BigInt(-1816749488);
    a = a ^ BigInt(23);
    a = a * BigInt(-1437087596);
    std::cout << a << std::endl;
    a = a ^ BigInt(14);
    return 0;
}
deveria ser
0
23427561698392424391
10063782719078314320
166338211008492605799299969197570759222625827595723484924718601562435750653247210970655095544125815363674400225061400741353273900239221828226279535045227497318734597072578261708593429729338893964277384107498761577821701979080327489867137111807744071355864310236291751476338886836902818190840949224118708508530999919957462047141094595003820704949744269724135980588544249875423303039481218494157970421745147524042146067521022286874403530203702755328

mas deu
ooi5

B: 2036073398 A: 0 DEBBUG a - b:-2036073398
NUMERO A 0 NUMERO B 1103762471
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
DEBBUGa+b com eles tamanho =< 731720855
FUI INSERIDO EM 1
NUMERO A 0 NUMERO B 1590423911
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
ooi21972

DEBBUGa+b com eles tamanho =< 187251693
FUI INSERIDO EM 1
ooiNUMERO A 0 NUMERO B 921364237
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
21972

TO AQNUMERO A 0 NUMERO B 1437087596
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
-21972


Teste 3 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(13480131);
    a = a - BigInt(1973391475);
    a = a / (2088710192);
    a = a ^ BigInt(20);
    std::cout << a.abs() << std::endl;
    a = a + BigInt(-892225132);
    a = a - BigInt(-296066066);
    std::cout << a << std::endl;
    std::cout << a.abs() << std::endl;
    std::cout << a << std::endl;
    std::cout << a.abs() << std::endl;
    a = a / (950764971);
    a = a ^ BigInt(20);
    a = a + BigInt(-1876818979);
    return 0;
}
deveria ser
0
-596159066
596159066
-596159066
596159066

mas deu
B: 1973391475 A: 13480131 DEBBUG a - b:-1959911344
ooi22045

B: 892225132 A: 0 DEBBUG a - b:-892225132
DEBBUGa+b com eles tamanho =< 296066066
FUI INSERIDO EM 1
22045

22045

22045

5

ooiB: 1876818979 A: 0 DEBBUG a - b:-1876818979

Teste 4 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(-11754196);
    a = a * BigInt(-1065604190);
    a = a + BigInt(779638624);
    std::cout << a << std::endl;
    a = a ^ BigInt(22);
    a = a / (-359102368);
    a = a + BigInt(-1785131607);
    a = a * BigInt(66911780);
    a = a - BigInt(1226894624);
    a = a / (845881284);
    a = a + BigInt(424201480);
    a = a * BigInt(1365812531);
    std::cout << a << std::endl;
    a = a ^ BigInt(26);
    return 0;
}
deveria ser
12525321287319864
-426305795230171994832521340403314715617542956424285706554239346838399832030767506556485353156391998896441284522844704193371071770839500872921673401682335697592158120323260303491754543244042514247176268343363842549929567915023713558991407053364470225239590966828120029756290766531268697643156100083760519451357129882912122003766378971815216790969835183574

mas deu
NUMERO A 11754196 NUMERO B 1065604190
RESULTADO MUL 12525320507681240
CARRY DA DIV 12525320
DEBBBUF 507681240
CARRY12525320
12525320507681240 Armazenado em 0
Quantidade de partes: 2
termina um numero aq
Retorno BIG INT  12525320507681240
VALOR VERDADEIRO 12525320507681240
12525321000000000

ooiB: 1785131607 A: 0 DEBBUG a - b:-1785131607
NUMERO A 0 NUMERO B 66911780
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
B: 1226894624 A: 0 DEBBUG a - b:-1226894624
ooiDEBBUGa+b com eles tamanho =< 424201480
FUI INSERIDO EM 1
NUMERO A 0 NUMERO B 1365812531
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
21899


Teste 5 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(9063520);
    a = a / (-898890868);
    std::cout << a << std::endl;
    a = a + BigInt(1681636717);
    a = a - BigInt(1251763945);
    std::cout << a.abs() << std::endl;
    a = a * BigInt(-1542917296);
    std::cout << a << std::endl;
    a = a ^ BigInt(11);
    a = a - BigInt(1920679447);
    std::cout << a.abs() << std::endl;
    a = a * BigInt(442714890);
    a = a - BigInt(-2144687189);
    std::cout << a << std::endl;
    std::cout << a << std::endl;
    a = a ^ BigInt(29);
    return 0;
}
deveria ser
0
429872772
-663258134998264512
10927188611371056149140602902968153821915284905118865092979222715939318687852180241220622245673430467673342842340144836460710165621506942763793868044874124467788336425700800811947080509188650778135
-4837629104092389872250605608721226892772304946088358796563136356972576719567422311752161243224865745418652532378904563857771290295007227799909298274160963077603221903987123204373062433446597518488306242961
-4837629104092389872250605608721226892772304946088358796563136356972576719567422311752161243224865745418652532378904563857771290295007227799909298274160963077603221903987123204373062433446597518488306242961

mas deu
ooi5

DEBBUGa+b com eles tamanho =< 681636717
FUI INSERIDO EM 1
0000000000

NUMERO A 0 NUMERO B 1542917296
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 000000000
NUMERO A 0 NUMERO B 1542917296
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0000000000
0000000000 Armazenado em 0
Quantidade de partes: 2
termina um numero aq
Retorno BIG INT  0000000000
VALOR VERDADEIRO 0000000000
-0000000000

B: 1920679447 A: 0 DEBBUG a - b:-1920679447
22033

NUMERO A 0 NUMERO B 442714890
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
DEBBUGa+b com eles tamanho =< 144687189
FUI INSERIDO EM 1
2144687189

2144687189


Teste 6 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(17777484);
    a = a + BigInt(-1301918171);
    std::cout << a.abs() << std::endl;
    a = a + BigInt(942836155);
    a = a / (-1976006112);
    std::cout << a << std::endl;
    std::cout << a.abs() << std::endl;
    a = a ^ BigInt(19);
    std::cout << a.abs() << std::endl;
    a = a - BigInt(1338433611);
    a = a / (-944632314);
    a = a + BigInt(321668473);
    a = a / (-1076382025);
    a = a * BigInt(-657339490);
    a = a + BigInt(-1490449851);
    std::cout << a.abs() << std::endl;
    a = a + BigInt(934026480);
    a = a / (896605907);
    return 0;
}
deveria ser
1284140687
0
0
0
1490449851

mas deu
B: 1301918171 A: 17777484 DEBBUG a - b:-1284140687
21882

DEBBUGa+b com eles tamanho =< 942836155
FUI INSERIDO EM 1
ooi21882

5

5

B: 1338433611 A: 0 DEBBUG a - b:-1338433611
ooiDEBBUGa+b com eles tamanho =< 321668473
FUI INSERIDO EM 1
ooiNUMERO A 0 NUMERO B 657339490
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
DEBBUGa+b com eles tamanho =< 490449851
FUI INSERIDO EM 1
1490449851

TO AQooi
Teste 7 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(-13826789);
    a = a - BigInt(1886098649);
    a = a ^ BigInt(15);
    std::cout << a.abs() << std::endl;
    a = a / (2048648207);
    a = a + BigInt(-837449050);
    std::cout << a.abs() << std::endl;
    a = a / (-1205682332);
    std::cout << a.abs() << std::endl;
    a = a + BigInt(1131617913);
    a = a * BigInt(515990451);
    return 0;
}
deveria ser
15172193153810388279658681956234309720811947416089018558778864693628089928645949689300261597005968743069212269699644744520341842023179845632
7405953399890090685373919816304659339109238981258151443460036032251822300619107558323829678877594010980535453981750779196643926537
6142541201217578002440131814343165923666565747816027085532539786982482132465309741574474427047997922375240922068808070745

mas deu
DEBBUGa+b com eles tamanho =< 899925438
FUI INSERIDO EM 1
21906

ooiB: 837449050 A: 0 DEBBUG a - b:-837449050
21906

ooi5

DEBBUGa+b com eles tamanho =< 131617913
FUI INSERIDO EM 1
NUMERO A 131617913 NUMERO B 515990451
RESULTADO MUL 67913586288548763
CARRY DA DIV 67913586
DEBBBUF 288548763
NUMERO A 1 NUMERO B 515990451
RESULTADO MUL 583904037
CARRY DA DIV 0
DEBBBUF 583904037288548763
583904037288548763 Armazenado em 0
Quantidade de partes: 2
termina um numero aq
Retorno BIG INT  583904037288548763
VALOR VERDADEIRO 583904037288548763

Teste 8 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(5042798);
    a = a / (-47798892);
    std::cout << a << std::endl;
    std::cout << a.abs() << std::endl;
    a = a + BigInt(-1279875912);
    std::cout << a << std::endl;
    a = a + BigInt(1089717255);
    a = a ^ BigInt(26);
    a = a + BigInt(1773153987);
    std::cout << a << std::endl;
    a = a ^ BigInt(28);
    return 0;
}
deveria ser
0
0
-1279875912
180725168948793373244672115511161151541383206120035888364083037809446679446308029770276894348292251188451454458208049246681342432251355668773646923134367408212671310695903039498386245246174361630392972211910951066436

mas deu
ooi5

0

B: 1279875912 A: 0 DEBBUG a - b:-1279875912
22074

DEBBUGa+b com eles tamanho =< 89717255
FUI INSERIDO EM 1
DEBBUGa+b com eles tamanho =< 773153987
FUI INSERIDO EM 1
1773153987


Teste 9 deu errado! +0.025
O resultado para
#include<iostream>
int main() {
    BigInt a(1899733);
    std::cout << a.abs() << std::endl;
    a = a ^ BigInt(19);
    std::cout << a << std::endl;
    a = a / (-601434876);
    a = a * BigInt(-2029028094);
    std::cout << a.abs() << std::endl;
    a = a ^ BigInt(13);
    a = a * BigInt(1691000868);
    std::cout << a << std::endl;
    a = a * BigInt(-170133280);
    return 0;
}
deveria ser
1899733
197314395068385415051203865692979359061489283813561340850625835147061190900065133021349090688885552693903097911135447597
665668831190908620268876944895456807692467821466434910865111980961343149434069901410513491387723581175639651756727551164


mas deu
1899733

5

ooiNUMERO A 0 NUMERO B 2029028094
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
21901

NUMERO A 0 NUMERO B 1691000868
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
21901

NUMERO A 0 NUMERO B 170133280
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5

Teste 10 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(16032444);
    a = a / (-748006064);
    a = a - BigInt(-2024310437);
    a = a * BigInt(1819543802);
    a = a / (931404605);
    a = a * BigInt(-783045032);
    a = a + BigInt(-191625719);
    a = a - BigInt(1313299349);
    a = a ^ BigInt(11);
    a = a * BigInt(-187127843);
    a = a / (743493487);
    std::cout << a.abs() << std::endl;
    a = a ^ BigInt(11);
    a = a - BigInt(1366551753);
    a = a / (-189725484);
    a = a * BigInt(-1560266427);
    std::cout << a.abs() << std::endl;
    a = a * BigInt(-1948878931);
    std::cout << a << std::endl;
    a = a ^ BigInt(28);
    return 0;
}
deveria ser
63187198410007676715221069869071356439818277536130441368235109092277036324420915077249389726976887387958452865325811534090541963733300041313008486436101852342202675508836570422920304939769890180607522985
527221600311612581782366143879505046919244596309528007378303535474156591190927990086449850506241385588670122236425663739396763627214489692647610598487330770351329345042791015108181660976507241739957332815950429400965337719119665866856058426236683024245459530841666368695671157467686572116840704784959125753311261395185115640536346570850422579892653048600133726801733079232361510178865309312958876436664136633572025735105584366272531057969840406322570090577552704477584828223856819360031744721908852538176932693614235852614168087368039592525571419616335339474743970721562491986817995103034345502478060307240564950622857961703279467548967692596102432799952129840504445628147750532573553740534769606179282622223258027674766346525616798159274597394456479699991049953301620922468977032437881422012043157745747737085467492821971549842603471296681249409302147715929659875544594743698213569169989798393301992452182340476970622822631009325409809236264770439424220957622309613786436887973291682528018610743007692406855181793518716324519442389547935219494507153687774700647027453351112281351110099862141394284276569984022036819611516156646893001212797509718428808170880010913420378398960987826597368041510831679515457650842920024237025223584904733462121118271098150881222525628365634387077090440038719584963984283609884069735540687330836874389432019482107020865723480725736034266711435667395733247302887206790049157211121750124399761630154689993272911391696625582519382413252541881449101384093972945448391570618578925184130935720561009084716231746910890664567634104725284631222953404831802954108662104342899858670541285714484207277817444247386867227602827334103989661437696968320857366784174088465422220591769346216050800432810175807657941288454318547001887747072157779741509036940491272010576352872581623099323969300907819292559672305489131624761994972960461740035825647459904337863048489078988166830360833860375435406954855153313767588816635934654715354913374831767174558815056760107902001292270040663184108050790713379581969665701473888424722045120391276510307178872798538173343759788701065551454522614677401611064076780440947858500267888608762970865774504650042625211252116239307288361814178560137916785333521195615323039085557793354344458


mas deu
ooiDEBBUGa+b com eles tamanho =< 24310437
FUI INSERIDO EM 1
NUMERO A 24310437 NUMERO B 1819543802
RESULTADO MUL 44233904967261474
CARRY DA DIV 44233904
DEBBBUF 967261474
NUMERO A 2 NUMERO B 1819543802
RESULTADO MUL 3683321508
CARRY DA DIV 3
DEBBBUF 683321508967261474
CARRY3
3683321508967261474 Armazenado em 0
Quantidade de partes: 3
termina um numero aq
Retorno BIG INT  3683321508967261474
VALOR VERDADEIRO 3683321508967261474
ooiNUMERO A 0 NUMERO B 783045032
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
DEBBUGa+b com eles tamanho =< 191625719
FUI INSERIDO EM 1
DEBBUGa+b com eles tamanho =< 313299349
FUI INSERIDO EM 1
NUMERO A 0 NUMERO B 187127843
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
ooi22036

B: 1366551753 A: 0 DEBBUG a - b:-1366551753
ooiNUMERO A 0 NUMERO B 1560266427
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
22036

NUMERO A 0 NUMERO B 1948878931
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
22036


Teste 11 deu errado! +0.025
O resultado para
#include<iostream>
int main() {
    BigInt a(16477778);
    std::cout << a.abs() << std::endl;
    a = a * BigInt(877279243);
    a = a + BigInt(2035292967);
    a = a - BigInt(-707831538);
    std::cout << a.abs() << std::endl;
    a = a ^ BigInt(19);
    std::cout << a.abs() << std::endl;
    a = a + BigInt(-1903981953);
    a = a * BigInt(1941960242);
    a = a / (725726336);
    std::cout << a << std::endl;
    a = a ^ BigInt(19);
    return 0;
}
deveria ser
16477778
14455615353286559
10982345171055653623710146179886388727617491495917565612740433729804235392139756726476413989696496272353704020673187724922269038144766032862188375227675266344527513779148396845602500722504779897786699897411564438124629871015482896527059076206177195840852955634223919943714986212229211714513148374564219043039
29387493092314578076119773629584178389235327225116738397334792283348520474175939055860947450476970712569120503273118969739964090961027320648916466780562122700523170808856184726081470107873496293322604455074835330020461391217385766039705362404878068432098624032644651132083734940724685703820439182252495794925

mas deu
16477778

NUMERO A 16477778 NUMERO B 877279243
RESULTADO MUL 14455612610162054
CARRY DA DIV 14455612
DEBBBUF 610162054
CARRY14455612
14455612610162054 Armazenado em 0
Quantidade de partes: 2
termina um numero aq
Retorno BIG INT  14455612610162054
VALOR VERDADEIRO 14455612610162054
0000000000

5

B: 1903981953 A: 0 DEBBUG a - b:-1903981953
NUMERO A 0 NUMERO B 1941960242
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
ooi22042


Teste 12 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(-7303329);
    a = a - BigInt(-671105573);
    a = a * BigInt(1887016095);
    std::cout << a.abs() << std::endl;
    a = a - BigInt(192434071);
    a = a * BigInt(955195157);
    std::cout << a << std::endl;
    a = a / (-1935075722);
    a = a * BigInt(1504095485);
    a = a ^ BigInt(14);
    std::cout << a.abs() << std::endl;
    std::cout << a << std::endl;
    a = a - BigInt(-1270178552);
    return 0;
}
deveria ser
1252605518325117180
1196482724551814589132503113
362054759979173713322084173092994712778811892664815910822535589820030113246712543012451575362885667123014114716902401923983108366837695996562939268494786684878145608092464278482602075678674528726503253379429544852674580001643955488505067380723328108255924290940410117305077754097470654160076526144855395530926704424529474919787623813277800318018694636870056216166400000000000000
362054759979173713322084173092994712778811892664815910822535589820030113246712543012451575362885667123014114716902401923983108366837695996562939268494786684878145608092464278482602075678674528726503253379429544852674580001643955488505067380723328108255924290940410117305077754097470654160076526144855395530926704424529474919787623813277800318018694636870056216166400000000000000

mas deu
TO AQNUMERO A 0 NUMERO B 1887016095
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
21887

B: 192434071 A: 0 DEBBUG a - b:-192434071
NUMERO A 0 NUMERO B 955195157
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
21887

ooiNUMERO A 0 NUMERO B 1504095485
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
21887

21887

DEBBUGa+b com eles tamanho =< 270178552
FUI INSERIDO EM 1

Teste 13 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(12858898);
    a = a + BigInt(-1274467984);
    a = a / (884344357);
    a = a + BigInt(1809901632);
    std::cout << a.abs() << std::endl;
    std::cout << a << std::endl;
    a = a - BigInt(-1226972309);
    a = a / (-986348138);
    std::cout << a.abs() << std::endl;
    a = a ^ BigInt(17);
    a = a / (-548037485);
    a = a * BigInt(950903636);
    return 0;
}
deveria ser
1809901631
1809901631
3

mas deu
B: 1274467984 A: 12858898 DEBBUG a - b:-1261609086
ooiDEBBUGa+b com eles tamanho =< 809901632
FUI INSERIDO EM 1
1809901632

1809901632

ooi21939

ooiNUMERO A 0 NUMERO B 950903636
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5

Teste 14 deu errado! +0.014
O resultado para
#include<iostream>
int main() {
    BigInt a(5689768);
    std::cout << a.abs() << std::endl;
    a = a ^ BigInt(30);
    a = a * BigInt(18251852);
    std::cout << a << std::endl;
    a = a - BigInt(775809839);
    std::cout << a << std::endl;
    a = a - BigInt(-82302647);
    a = a ^ BigInt(14);
    std::cout << a.abs() << std::endl;
    a = a + BigInt(179006098);
    std::cout << a.abs() << std::endl;
    a = a - BigInt(-966655608);
    std::cout << a << std::endl;
    a = a - BigInt(-705269107);
    a = a / (-1040497508);
    std::cout << a << std::endl;
    a = a ^ BigInt(27);
    return 0;
}
deveria ser
5689768
820623011640683666745030240885750526927577318734009266523840907922307875946918766196500288984485428510122712422034120962157594435633337049410841238590659748073151002556437411007889960476051948255503555019931648
820623011640683666745030240885750526927577318734009266523840907922307875946918766196500288984485428510122712422034120962157594435633337049410841238590659748073151002556437411007889960476051948255503554244121809





mas deu
5689768

NUMERO A 0 NUMERO B 18251852
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
21899

B: 775809839 A: 0 DEBBUG a - b:-775809839
21899

DEBBUGa+b com eles tamanho =< 82302647
FUI INSERIDO EM 1
21899

DEBBUGa+b com eles tamanho =< 179006098
FUI INSERIDO EM 1
5

DEBBUGa+b com eles tamanho =< 966655608
FUI INSERIDO EM 1
21899

DEBBUGa+b com eles tamanho =< 705269107
FUI INSERIDO EM 1
ooi21899


Teste 15 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(5874670);
    a = a / (-260728499);
    a = a - BigInt(1489772637);
    std::cout << a.abs() << std::endl;
    a = a - BigInt(672442652);
    a = a ^ BigInt(17);
    a = a + BigInt(2129480115);
    std::cout << a.abs() << std::endl;
    std::cout << a << std::endl;
    a = a ^ BigInt(13);
    std::cout << a.abs() << std::endl;
    a = a - BigInt(2016679738);
    a = a / (-424766344);
    std::cout << a.abs() << std::endl;
    return 0;
}
deveria ser
1489772637
493493999707800404461037293671064573788762340647317914140621325420477005366310814038526076217919678780932090177388460447364770696635146763650488717431479462214
-493493999707800404461037293671064573788762340647317914140621325420477005366310814038526076217919678780932090177388460447364770696635146763650488717431479462214



mas deu
ooiB: 1489772637 A: 0 DEBBUG a - b:-1489772637
22032

B: 672442652 A: 0 DEBBUG a - b:-672442652
DEBBUGa+b com eles tamanho =< 129480115
FUI INSERIDO EM 1
2129480115

2129480115

5

B: 2016679738 A: 0 DEBBUG a - b:-2016679738
ooi22032


Teste 16 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(-20087925);
    a = a + BigInt(951907757);
    std::cout << a << std::endl;
    a = a - BigInt(284148325);
    a = a / (-1571574536);
    a = a ^ BigInt(15);
    std::cout << a << std::endl;
    a = a * BigInt(-50526375);
    std::cout << a.abs() << std::endl;
    a = a - BigInt(-1757113416);
    a = a / (-1990905815);
    a = a - BigInt(1524002675);
    a = a ^ BigInt(30);
    std::cout << a.abs() << std::endl;
    a = a - BigInt(1508951098);
    return 0;
}
deveria ser
931819832
0
0
308725056614524937952509193528237562564082811379164555052819297257251153568340301590837802244207418321725318902184456381222009001562123998749772990326296816960972546988102476408922251242165599278162834115884800994143244700147725648750086924199109716937527991831302642822265625

mas deu
TO AQ5

B: 284148325 A: 0 DEBBUG a - b:-284148325
ooi21867

NUMERO A 0 NUMERO B 50526375
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
21867

TO AQooiB: 1524002675 A: 0 DEBBUG a - b:-1524002675
21867

B: 1508951098 A: 0 DEBBUG a - b:-1508951098

Teste 17 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(17670996);
    a = a * BigInt(-1804851208);
    std::cout << a.abs() << std::endl;
    a = a - BigInt(-1771068696);
    a = a + BigInt(733437655);
    a = a / (-624435992);
    std::cout << a.abs() << std::endl;
    a = a ^ BigInt(25);
    std::cout << a.abs() << std::endl;
    std::cout << a << std::endl;
    std::cout << a.abs() << std::endl;
    a = a / (989886197);
    std::cout << a << std::endl;
    a = a ^ BigInt(26);
    return 0;
}
deveria ser
31893518477163168
51075716
5074129963097454721854514744144209007857926489643754341958035589243752661454025553329980540396630173646022625086175844205008550019270700222158582553514882285336289401525599270437127807226085376
5074129963097454721854514744144209007857926489643754341958035589243752661454025553329980540396630173646022625086175844205008550019270700222158582553514882285336289401525599270437127807226085376
5074129963097454721854514744144209007857926489643754341958035589243752661454025553329980540396630173646022625086175844205008550019270700222158582553514882285336289401525599270437127807226085376
5125973044654399521700285658336348140692304743434819651251320144676946800031019680265306841526380202315340118927000094542189631137235364665013692026978412635989396871573510051112600580

mas deu
NUMERO A 17670996 NUMERO B 1804851208
RESULTADO MUL 31893518477163168
CARRY DA DIV 31893518
DEBBBUF 477163168
CARRY31893518
31893518477163168 Armazenado em 0
Quantidade de partes: 2
termina um numero aq
Retorno BIG INT  31893518477163168
VALOR VERDADEIRO 31893518477163168
31893518477163168

TO AQTO AQooi5

5

5

0

ooi5


Teste 18 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(4143470);
    a = a ^ BigInt(17);
    a = a * BigInt(356592892);
    a = a + BigInt(904254108);
    std::cout << a.abs() << std::endl;
    a = a - BigInt(1410322216);
    std::cout << a << std::endl;
    a = a - BigInt(958352909);
    a = a / (-1824574958);
    std::cout << a << std::endl;
    a = a - BigInt(259633954);
    std::cout << a.abs() << std::endl;
    a = a / (1924750309);
    a = a * BigInt(-453033746);
    a = a ^ BigInt(15);
    std::cout << a.abs() << std::endl;
    a = a * BigInt(-2004097637);
    a = a + BigInt(-1739837686);
    a = a / (502732169);
    std::cout << a << std::endl;
    a = a ^ BigInt(17);
    return 0;
}
deveria ser
11152290178923641818290085048549200127555144811744474259682518516316345139652048477507664322174835469000400000000904254108
11152290178923641818290085048549200127555144811744474259682518516316345139652048477507664322174835469000399999999493931892
-6112267479078073490850840148683658590229947029528657084464116884101368412868488178334224579538943485269734804722
6112267479078073490850840148683658590229947029528657084464116884101368412868488178334224579538943485269994438676



mas deu
NUMERO A 0 NUMERO B 356592892
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
DEBBUGa+b com eles tamanho =< 904254108
FUI INSERIDO EM 1
5

B: 1410322216 A: 0 DEBBUG a - b:-1410322216
22024

B: 958352909 A: 0 DEBBUG a - b:-958352909
ooi22024

B: 259633954 A: 0 DEBBUG a - b:-259633954
22024

ooiNUMERO A 0 NUMERO B 453033746
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
22024

NUMERO A 0 NUMERO B 2004097637
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
DEBBUGa+b com eles tamanho =< 739837686
FUI INSERIDO EM 1
ooi22024


Teste 19 deu errado!
O resultado para
#include<iostream>
int main() {
    BigInt a(-2817961);
    a = a + BigInt(53549012);
    std::cout << a.abs() << std::endl;
    a = a / (-888481910);
    a = a + BigInt(-1921604932);
    a = a * BigInt(1630591104);
    a = a + BigInt(695529143);
    a = a * BigInt(1543084082);
    a = a + BigInt(-1639287290);
    a = a / (1392807208);
    a = a ^ BigInt(16);
    std::cout << a.abs() << std::endl;
    a = a * BigInt(1840107893);
    return 0;
}
deveria ser
50731051
444758381425450626468063461344873528210567244929971385331832884675577933864207595445280946304772034691861689623683682416169629338173853886365196459474124598694619829739940428497006878662130536156731764555252486079052743843117054482979933755067126229133524115334870520159575596206352065853543940096

mas deu
TO AQ5

ooiB: 1921604932 A: 0 DEBBUG a - b:-1921604932
NUMERO A 0 NUMERO B 1630591104
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
DEBBUGa+b com eles tamanho =< 695529143
FUI INSERIDO EM 1
NUMERO A 0 NUMERO B 1543084082
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
B: 1639287290 A: 0 DEBBUG a - b:-1639287290
ooi21974

NUMERO A 0 NUMERO B 1840107893
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5

Teste 20 deu errado! +0.020
O resultado para
#include<iostream>
int main() {
    BigInt a(-16996727);
    std::cout << a.abs() << std::endl;
    a = a - BigInt(-1597753676);
    std::cout << a << std::endl;
    a = a - BigInt(-58186574);
    a = a * BigInt(-298842287);
    a = a / (-1425239841);
    a = a * BigInt(1995974863);
    a = a - BigInt(737658648);
    std::cout << a << std::endl;
    a = a + BigInt(-1955478740);
    a = a - BigInt(-988484739);
    a = a + BigInt(-1973122522);
    a = a - BigInt(824681037);
    a = a + BigInt(-371951827);
    a = a / (-1000815958);
    std::cout << a.abs() << std::endl;
    std::cout << a << std::endl;
    a = a - BigInt(-40242115);
    return 0;
}
deveria ser
16996727
1580756949
685919503401753114
685360274
-685360274

mas deu
16996727

TO AQ22103

DEBBUGa+b com eles tamanho =< 58186574
FUI INSERIDO EM 1
NUMERO A 0 NUMERO B 298842287
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
ooiNUMERO A 0 NUMERO B 1995974863
RESULTADO MUL 0
CARRY DA DIV 0
DEBBBUF 0
0 Armazenado em 0
Quantidade de partes: 1
termina um numero aq
Retorno BIG INT  5
VALOR VERDADEIRO 5
B: 737658648 A: 0 DEBBUG a - b:-737658648
22103

B: 1955478740 A: 0 DEBBUG a - b:-1955478740
DEBBUGa+b com eles tamanho =< 988484739
FUI INSERIDO EM 1
B: 1973122522 A: 0 DEBBUG a - b:-1973122522
B: 824681037 A: 0 DEBBUG a - b:-824681037
B: 371951827 A: 0 DEBBUG a - b:-371951827
ooi22103

22103

DEBBUGa+b com eles tamanho =< 40242115
FUI INSERIDO EM 1

Nota exercicio 6: 0.1
Procurando exercício 7...
Procurando exercício 8...
Exercício 8...
Compilando...
g++ -O2 -Wno-unused-result  "ex8.cpp"  > comp.log 2>&1
Teste 1: correto! +0.100
Teste 2: correto! +0.100
Teste 3: correto! +0.100
Teste 4: correto! +0.100
Teste 5: correto! +0.100
Teste 6: correto! +0.100
Teste 7: correto! +0.100
Teste 8: correto! +0.100
Teste 9: correto! +0.100
Teste 10: correto! +0.100
Teste 11: correto! +0.100
Teste 12: correto! +0.100
Teste 13: correto! +0.100
Teste 14: correto! +0.100
Teste 15: correto! +0.100
Teste 16: correto! +0.100
Teste 17: correto! +0.100
Teste 18: correto! +0.100
Teste 19: correto! +0.100
Teste 20: correto! +0.100
Nota exercicio 8: 2.0
Nota total: 7.10
{"scores": {"ex1": 1.0, "ex2": 1.0, "ex3": 1.0, "ex4": 1.0, "ex5": 1.0, "ex6": 0.1, "ex7": 0.0, "ex8": 2.0}}
